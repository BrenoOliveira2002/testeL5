
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Produtos
 * 
 */
export type Produtos = {
  id: number
  nome: string | null
  categoria: string | null
  preco: Prisma.Decimal | null
}

/**
 * Model Pessoas
 * 
 */
export type Pessoas = {
  id: number
  nome: string | null
  idade: number | null
  endereco: string | null
}

/**
 * Model Pagamentos
 * 
 */
export type Pagamentos = {
  pagamento: number
  descricao: string | null
}

/**
 * Model clientes_cluster
 * 
 */
export type clientes_cluster = {
  id: number
  nome: string | null
  idade: number | null
  endereco: string | null
  cluster: number | null
}

/**
 * Model clusters
 * 
 */
export type clusters = {
  cluster: number
  descricao: string | null
}

/**
 * Model vendas
 * 
 */
export type vendas = {
  id: number
  id_cliente: number | null
  id_produto: number | null
  data_venda: Date | null
  valor: Prisma.Decimal | null
  pagamento: number | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Produtos
 * const produtos = await prisma.produtos.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Produtos
   * const produtos = await prisma.produtos.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.produtos`: Exposes CRUD operations for the **Produtos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produtos.findMany()
    * ```
    */
  get produtos(): Prisma.ProdutosDelegate<GlobalReject>;

  /**
   * `prisma.pessoas`: Exposes CRUD operations for the **Pessoas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pessoas
    * const pessoas = await prisma.pessoas.findMany()
    * ```
    */
  get pessoas(): Prisma.PessoasDelegate<GlobalReject>;

  /**
   * `prisma.pagamentos`: Exposes CRUD operations for the **Pagamentos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pagamentos
    * const pagamentos = await prisma.pagamentos.findMany()
    * ```
    */
  get pagamentos(): Prisma.PagamentosDelegate<GlobalReject>;

  /**
   * `prisma.clientes_cluster`: Exposes CRUD operations for the **clientes_cluster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes_clusters
    * const clientes_clusters = await prisma.clientes_cluster.findMany()
    * ```
    */
  get clientes_cluster(): Prisma.clientes_clusterDelegate<GlobalReject>;

  /**
   * `prisma.clusters`: Exposes CRUD operations for the **clusters** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clusters
    * const clusters = await prisma.clusters.findMany()
    * ```
    */
  get clusters(): Prisma.clustersDelegate<GlobalReject>;

  /**
   * `prisma.vendas`: Exposes CRUD operations for the **vendas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendas
    * const vendas = await prisma.vendas.findMany()
    * ```
    */
  get vendas(): Prisma.vendasDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Produtos: 'Produtos',
    Pessoas: 'Pessoas',
    Pagamentos: 'Pagamentos',
    clientes_cluster: 'clientes_cluster',
    clusters: 'clusters',
    vendas: 'vendas'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Produtos
   */


  export type AggregateProdutos = {
    _count: ProdutosCountAggregateOutputType | null
    _avg: ProdutosAvgAggregateOutputType | null
    _sum: ProdutosSumAggregateOutputType | null
    _min: ProdutosMinAggregateOutputType | null
    _max: ProdutosMaxAggregateOutputType | null
  }

  export type ProdutosAvgAggregateOutputType = {
    id: number | null
    preco: Decimal | null
  }

  export type ProdutosSumAggregateOutputType = {
    id: number | null
    preco: Decimal | null
  }

  export type ProdutosMinAggregateOutputType = {
    id: number | null
    nome: string | null
    categoria: string | null
    preco: Decimal | null
  }

  export type ProdutosMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    categoria: string | null
    preco: Decimal | null
  }

  export type ProdutosCountAggregateOutputType = {
    id: number
    nome: number
    categoria: number
    preco: number
    _all: number
  }


  export type ProdutosAvgAggregateInputType = {
    id?: true
    preco?: true
  }

  export type ProdutosSumAggregateInputType = {
    id?: true
    preco?: true
  }

  export type ProdutosMinAggregateInputType = {
    id?: true
    nome?: true
    categoria?: true
    preco?: true
  }

  export type ProdutosMaxAggregateInputType = {
    id?: true
    nome?: true
    categoria?: true
    preco?: true
  }

  export type ProdutosCountAggregateInputType = {
    id?: true
    nome?: true
    categoria?: true
    preco?: true
    _all?: true
  }

  export type ProdutosAggregateArgs = {
    /**
     * Filter which Produtos to aggregate.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: Enumerable<ProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produtos
    **/
    _count?: true | ProdutosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutosMaxAggregateInputType
  }

  export type GetProdutosAggregateType<T extends ProdutosAggregateArgs> = {
        [P in keyof T & keyof AggregateProdutos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProdutos[P]>
      : GetScalarType<T[P], AggregateProdutos[P]>
  }




  export type ProdutosGroupByArgs = {
    where?: ProdutosWhereInput
    orderBy?: Enumerable<ProdutosOrderByWithAggregationInput>
    by: ProdutosScalarFieldEnum[]
    having?: ProdutosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutosCountAggregateInputType | true
    _avg?: ProdutosAvgAggregateInputType
    _sum?: ProdutosSumAggregateInputType
    _min?: ProdutosMinAggregateInputType
    _max?: ProdutosMaxAggregateInputType
  }


  export type ProdutosGroupByOutputType = {
    id: number
    nome: string | null
    categoria: string | null
    preco: Decimal | null
    _count: ProdutosCountAggregateOutputType | null
    _avg: ProdutosAvgAggregateOutputType | null
    _sum: ProdutosSumAggregateOutputType | null
    _min: ProdutosMinAggregateOutputType | null
    _max: ProdutosMaxAggregateOutputType | null
  }

  type GetProdutosGroupByPayload<T extends ProdutosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProdutosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutosGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutosGroupByOutputType[P]>
        }
      >
    >


  export type ProdutosSelect = {
    id?: boolean
    nome?: boolean
    categoria?: boolean
    preco?: boolean
  }


  export type ProdutosGetPayload<S extends boolean | null | undefined | ProdutosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Produtos :
    S extends undefined ? never :
    S extends { include: any } & (ProdutosArgs | ProdutosFindManyArgs)
    ? Produtos 
    : S extends { select: any } & (ProdutosArgs | ProdutosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Produtos ? Produtos[P] : never
  } 
      : Produtos


  type ProdutosCountArgs = 
    Omit<ProdutosFindManyArgs, 'select' | 'include'> & {
      select?: ProdutosCountAggregateInputType | true
    }

  export interface ProdutosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Produtos that matches the filter.
     * @param {ProdutosFindUniqueArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProdutosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProdutosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Produtos'> extends True ? Prisma__ProdutosClient<ProdutosGetPayload<T>> : Prisma__ProdutosClient<ProdutosGetPayload<T> | null, null>

    /**
     * Find one Produtos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProdutosFindUniqueOrThrowArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProdutosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProdutosFindUniqueOrThrowArgs>
    ): Prisma__ProdutosClient<ProdutosGetPayload<T>>

    /**
     * Find the first Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosFindFirstArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProdutosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProdutosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Produtos'> extends True ? Prisma__ProdutosClient<ProdutosGetPayload<T>> : Prisma__ProdutosClient<ProdutosGetPayload<T> | null, null>

    /**
     * Find the first Produtos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosFindFirstOrThrowArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProdutosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProdutosFindFirstOrThrowArgs>
    ): Prisma__ProdutosClient<ProdutosGetPayload<T>>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produtos.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produtos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtosWithIdOnly = await prisma.produtos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProdutosFindManyArgs>(
      args?: SelectSubset<T, ProdutosFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProdutosGetPayload<T>>>

    /**
     * Create a Produtos.
     * @param {ProdutosCreateArgs} args - Arguments to create a Produtos.
     * @example
     * // Create one Produtos
     * const Produtos = await prisma.produtos.create({
     *   data: {
     *     // ... data to create a Produtos
     *   }
     * })
     * 
    **/
    create<T extends ProdutosCreateArgs>(
      args: SelectSubset<T, ProdutosCreateArgs>
    ): Prisma__ProdutosClient<ProdutosGetPayload<T>>

    /**
     * Create many Produtos.
     *     @param {ProdutosCreateManyArgs} args - Arguments to create many Produtos.
     *     @example
     *     // Create many Produtos
     *     const produtos = await prisma.produtos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProdutosCreateManyArgs>(
      args?: SelectSubset<T, ProdutosCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Produtos.
     * @param {ProdutosDeleteArgs} args - Arguments to delete one Produtos.
     * @example
     * // Delete one Produtos
     * const Produtos = await prisma.produtos.delete({
     *   where: {
     *     // ... filter to delete one Produtos
     *   }
     * })
     * 
    **/
    delete<T extends ProdutosDeleteArgs>(
      args: SelectSubset<T, ProdutosDeleteArgs>
    ): Prisma__ProdutosClient<ProdutosGetPayload<T>>

    /**
     * Update one Produtos.
     * @param {ProdutosUpdateArgs} args - Arguments to update one Produtos.
     * @example
     * // Update one Produtos
     * const produtos = await prisma.produtos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProdutosUpdateArgs>(
      args: SelectSubset<T, ProdutosUpdateArgs>
    ): Prisma__ProdutosClient<ProdutosGetPayload<T>>

    /**
     * Delete zero or more Produtos.
     * @param {ProdutosDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produtos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProdutosDeleteManyArgs>(
      args?: SelectSubset<T, ProdutosDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produtos = await prisma.produtos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProdutosUpdateManyArgs>(
      args: SelectSubset<T, ProdutosUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produtos.
     * @param {ProdutosUpsertArgs} args - Arguments to update or create a Produtos.
     * @example
     * // Update or create a Produtos
     * const produtos = await prisma.produtos.upsert({
     *   create: {
     *     // ... data to create a Produtos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produtos we want to update
     *   }
     * })
    **/
    upsert<T extends ProdutosUpsertArgs>(
      args: SelectSubset<T, ProdutosUpsertArgs>
    ): Prisma__ProdutosClient<ProdutosGetPayload<T>>

    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produtos.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends ProdutosCountArgs>(
      args?: Subset<T, ProdutosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutosAggregateArgs>(args: Subset<T, ProdutosAggregateArgs>): Prisma.PrismaPromise<GetProdutosAggregateType<T>>

    /**
     * Group by Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutosGroupByArgs['orderBy'] }
        : { orderBy?: ProdutosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Produtos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProdutosClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Produtos base type for findUnique actions
   */
  export type ProdutosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect | null
    /**
     * Filter, which Produtos to fetch.
     */
    where: ProdutosWhereUniqueInput
  }

  /**
   * Produtos findUnique
   */
  export interface ProdutosFindUniqueArgs extends ProdutosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Produtos findUniqueOrThrow
   */
  export type ProdutosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect | null
    /**
     * Filter, which Produtos to fetch.
     */
    where: ProdutosWhereUniqueInput
  }


  /**
   * Produtos base type for findFirst actions
   */
  export type ProdutosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: Enumerable<ProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: Enumerable<ProdutosScalarFieldEnum>
  }

  /**
   * Produtos findFirst
   */
  export interface ProdutosFindFirstArgs extends ProdutosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Produtos findFirstOrThrow
   */
  export type ProdutosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: Enumerable<ProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: Enumerable<ProdutosScalarFieldEnum>
  }


  /**
   * Produtos findMany
   */
  export type ProdutosFindManyArgs = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: Enumerable<ProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produtos.
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    distinct?: Enumerable<ProdutosScalarFieldEnum>
  }


  /**
   * Produtos create
   */
  export type ProdutosCreateArgs = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect | null
    /**
     * The data needed to create a Produtos.
     */
    data: XOR<ProdutosCreateInput, ProdutosUncheckedCreateInput>
  }


  /**
   * Produtos createMany
   */
  export type ProdutosCreateManyArgs = {
    /**
     * The data used to create many Produtos.
     */
    data: Enumerable<ProdutosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Produtos update
   */
  export type ProdutosUpdateArgs = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect | null
    /**
     * The data needed to update a Produtos.
     */
    data: XOR<ProdutosUpdateInput, ProdutosUncheckedUpdateInput>
    /**
     * Choose, which Produtos to update.
     */
    where: ProdutosWhereUniqueInput
  }


  /**
   * Produtos updateMany
   */
  export type ProdutosUpdateManyArgs = {
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutosUpdateManyMutationInput, ProdutosUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutosWhereInput
  }


  /**
   * Produtos upsert
   */
  export type ProdutosUpsertArgs = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect | null
    /**
     * The filter to search for the Produtos to update in case it exists.
     */
    where: ProdutosWhereUniqueInput
    /**
     * In case the Produtos found by the `where` argument doesn't exist, create a new Produtos with this data.
     */
    create: XOR<ProdutosCreateInput, ProdutosUncheckedCreateInput>
    /**
     * In case the Produtos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutosUpdateInput, ProdutosUncheckedUpdateInput>
  }


  /**
   * Produtos delete
   */
  export type ProdutosDeleteArgs = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect | null
    /**
     * Filter which Produtos to delete.
     */
    where: ProdutosWhereUniqueInput
  }


  /**
   * Produtos deleteMany
   */
  export type ProdutosDeleteManyArgs = {
    /**
     * Filter which Produtos to delete
     */
    where?: ProdutosWhereInput
  }


  /**
   * Produtos without action
   */
  export type ProdutosArgs = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect | null
  }



  /**
   * Model Pessoas
   */


  export type AggregatePessoas = {
    _count: PessoasCountAggregateOutputType | null
    _avg: PessoasAvgAggregateOutputType | null
    _sum: PessoasSumAggregateOutputType | null
    _min: PessoasMinAggregateOutputType | null
    _max: PessoasMaxAggregateOutputType | null
  }

  export type PessoasAvgAggregateOutputType = {
    id: number | null
    idade: number | null
  }

  export type PessoasSumAggregateOutputType = {
    id: number | null
    idade: number | null
  }

  export type PessoasMinAggregateOutputType = {
    id: number | null
    nome: string | null
    idade: number | null
    endereco: string | null
  }

  export type PessoasMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    idade: number | null
    endereco: string | null
  }

  export type PessoasCountAggregateOutputType = {
    id: number
    nome: number
    idade: number
    endereco: number
    _all: number
  }


  export type PessoasAvgAggregateInputType = {
    id?: true
    idade?: true
  }

  export type PessoasSumAggregateInputType = {
    id?: true
    idade?: true
  }

  export type PessoasMinAggregateInputType = {
    id?: true
    nome?: true
    idade?: true
    endereco?: true
  }

  export type PessoasMaxAggregateInputType = {
    id?: true
    nome?: true
    idade?: true
    endereco?: true
  }

  export type PessoasCountAggregateInputType = {
    id?: true
    nome?: true
    idade?: true
    endereco?: true
    _all?: true
  }

  export type PessoasAggregateArgs = {
    /**
     * Filter which Pessoas to aggregate.
     */
    where?: PessoasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pessoas to fetch.
     */
    orderBy?: Enumerable<PessoasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PessoasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pessoas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pessoas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pessoas
    **/
    _count?: true | PessoasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PessoasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PessoasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PessoasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PessoasMaxAggregateInputType
  }

  export type GetPessoasAggregateType<T extends PessoasAggregateArgs> = {
        [P in keyof T & keyof AggregatePessoas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePessoas[P]>
      : GetScalarType<T[P], AggregatePessoas[P]>
  }




  export type PessoasGroupByArgs = {
    where?: PessoasWhereInput
    orderBy?: Enumerable<PessoasOrderByWithAggregationInput>
    by: PessoasScalarFieldEnum[]
    having?: PessoasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PessoasCountAggregateInputType | true
    _avg?: PessoasAvgAggregateInputType
    _sum?: PessoasSumAggregateInputType
    _min?: PessoasMinAggregateInputType
    _max?: PessoasMaxAggregateInputType
  }


  export type PessoasGroupByOutputType = {
    id: number
    nome: string | null
    idade: number | null
    endereco: string | null
    _count: PessoasCountAggregateOutputType | null
    _avg: PessoasAvgAggregateOutputType | null
    _sum: PessoasSumAggregateOutputType | null
    _min: PessoasMinAggregateOutputType | null
    _max: PessoasMaxAggregateOutputType | null
  }

  type GetPessoasGroupByPayload<T extends PessoasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PessoasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PessoasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PessoasGroupByOutputType[P]>
            : GetScalarType<T[P], PessoasGroupByOutputType[P]>
        }
      >
    >


  export type PessoasSelect = {
    id?: boolean
    nome?: boolean
    idade?: boolean
    endereco?: boolean
  }


  export type PessoasGetPayload<S extends boolean | null | undefined | PessoasArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Pessoas :
    S extends undefined ? never :
    S extends { include: any } & (PessoasArgs | PessoasFindManyArgs)
    ? Pessoas 
    : S extends { select: any } & (PessoasArgs | PessoasFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Pessoas ? Pessoas[P] : never
  } 
      : Pessoas


  type PessoasCountArgs = 
    Omit<PessoasFindManyArgs, 'select' | 'include'> & {
      select?: PessoasCountAggregateInputType | true
    }

  export interface PessoasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Pessoas that matches the filter.
     * @param {PessoasFindUniqueArgs} args - Arguments to find a Pessoas
     * @example
     * // Get one Pessoas
     * const pessoas = await prisma.pessoas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PessoasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PessoasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Pessoas'> extends True ? Prisma__PessoasClient<PessoasGetPayload<T>> : Prisma__PessoasClient<PessoasGetPayload<T> | null, null>

    /**
     * Find one Pessoas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PessoasFindUniqueOrThrowArgs} args - Arguments to find a Pessoas
     * @example
     * // Get one Pessoas
     * const pessoas = await prisma.pessoas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PessoasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PessoasFindUniqueOrThrowArgs>
    ): Prisma__PessoasClient<PessoasGetPayload<T>>

    /**
     * Find the first Pessoas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PessoasFindFirstArgs} args - Arguments to find a Pessoas
     * @example
     * // Get one Pessoas
     * const pessoas = await prisma.pessoas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PessoasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PessoasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Pessoas'> extends True ? Prisma__PessoasClient<PessoasGetPayload<T>> : Prisma__PessoasClient<PessoasGetPayload<T> | null, null>

    /**
     * Find the first Pessoas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PessoasFindFirstOrThrowArgs} args - Arguments to find a Pessoas
     * @example
     * // Get one Pessoas
     * const pessoas = await prisma.pessoas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PessoasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PessoasFindFirstOrThrowArgs>
    ): Prisma__PessoasClient<PessoasGetPayload<T>>

    /**
     * Find zero or more Pessoas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PessoasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pessoas
     * const pessoas = await prisma.pessoas.findMany()
     * 
     * // Get first 10 Pessoas
     * const pessoas = await prisma.pessoas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pessoasWithIdOnly = await prisma.pessoas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PessoasFindManyArgs>(
      args?: SelectSubset<T, PessoasFindManyArgs>
    ): Prisma.PrismaPromise<Array<PessoasGetPayload<T>>>

    /**
     * Create a Pessoas.
     * @param {PessoasCreateArgs} args - Arguments to create a Pessoas.
     * @example
     * // Create one Pessoas
     * const Pessoas = await prisma.pessoas.create({
     *   data: {
     *     // ... data to create a Pessoas
     *   }
     * })
     * 
    **/
    create<T extends PessoasCreateArgs>(
      args: SelectSubset<T, PessoasCreateArgs>
    ): Prisma__PessoasClient<PessoasGetPayload<T>>

    /**
     * Create many Pessoas.
     *     @param {PessoasCreateManyArgs} args - Arguments to create many Pessoas.
     *     @example
     *     // Create many Pessoas
     *     const pessoas = await prisma.pessoas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PessoasCreateManyArgs>(
      args?: SelectSubset<T, PessoasCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pessoas.
     * @param {PessoasDeleteArgs} args - Arguments to delete one Pessoas.
     * @example
     * // Delete one Pessoas
     * const Pessoas = await prisma.pessoas.delete({
     *   where: {
     *     // ... filter to delete one Pessoas
     *   }
     * })
     * 
    **/
    delete<T extends PessoasDeleteArgs>(
      args: SelectSubset<T, PessoasDeleteArgs>
    ): Prisma__PessoasClient<PessoasGetPayload<T>>

    /**
     * Update one Pessoas.
     * @param {PessoasUpdateArgs} args - Arguments to update one Pessoas.
     * @example
     * // Update one Pessoas
     * const pessoas = await prisma.pessoas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PessoasUpdateArgs>(
      args: SelectSubset<T, PessoasUpdateArgs>
    ): Prisma__PessoasClient<PessoasGetPayload<T>>

    /**
     * Delete zero or more Pessoas.
     * @param {PessoasDeleteManyArgs} args - Arguments to filter Pessoas to delete.
     * @example
     * // Delete a few Pessoas
     * const { count } = await prisma.pessoas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PessoasDeleteManyArgs>(
      args?: SelectSubset<T, PessoasDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pessoas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PessoasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pessoas
     * const pessoas = await prisma.pessoas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PessoasUpdateManyArgs>(
      args: SelectSubset<T, PessoasUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pessoas.
     * @param {PessoasUpsertArgs} args - Arguments to update or create a Pessoas.
     * @example
     * // Update or create a Pessoas
     * const pessoas = await prisma.pessoas.upsert({
     *   create: {
     *     // ... data to create a Pessoas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pessoas we want to update
     *   }
     * })
    **/
    upsert<T extends PessoasUpsertArgs>(
      args: SelectSubset<T, PessoasUpsertArgs>
    ): Prisma__PessoasClient<PessoasGetPayload<T>>

    /**
     * Count the number of Pessoas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PessoasCountArgs} args - Arguments to filter Pessoas to count.
     * @example
     * // Count the number of Pessoas
     * const count = await prisma.pessoas.count({
     *   where: {
     *     // ... the filter for the Pessoas we want to count
     *   }
     * })
    **/
    count<T extends PessoasCountArgs>(
      args?: Subset<T, PessoasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PessoasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pessoas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PessoasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PessoasAggregateArgs>(args: Subset<T, PessoasAggregateArgs>): Prisma.PrismaPromise<GetPessoasAggregateType<T>>

    /**
     * Group by Pessoas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PessoasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PessoasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PessoasGroupByArgs['orderBy'] }
        : { orderBy?: PessoasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PessoasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPessoasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Pessoas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PessoasClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Pessoas base type for findUnique actions
   */
  export type PessoasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect | null
    /**
     * Filter, which Pessoas to fetch.
     */
    where: PessoasWhereUniqueInput
  }

  /**
   * Pessoas findUnique
   */
  export interface PessoasFindUniqueArgs extends PessoasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pessoas findUniqueOrThrow
   */
  export type PessoasFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect | null
    /**
     * Filter, which Pessoas to fetch.
     */
    where: PessoasWhereUniqueInput
  }


  /**
   * Pessoas base type for findFirst actions
   */
  export type PessoasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect | null
    /**
     * Filter, which Pessoas to fetch.
     */
    where?: PessoasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pessoas to fetch.
     */
    orderBy?: Enumerable<PessoasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pessoas.
     */
    cursor?: PessoasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pessoas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pessoas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pessoas.
     */
    distinct?: Enumerable<PessoasScalarFieldEnum>
  }

  /**
   * Pessoas findFirst
   */
  export interface PessoasFindFirstArgs extends PessoasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pessoas findFirstOrThrow
   */
  export type PessoasFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect | null
    /**
     * Filter, which Pessoas to fetch.
     */
    where?: PessoasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pessoas to fetch.
     */
    orderBy?: Enumerable<PessoasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pessoas.
     */
    cursor?: PessoasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pessoas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pessoas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pessoas.
     */
    distinct?: Enumerable<PessoasScalarFieldEnum>
  }


  /**
   * Pessoas findMany
   */
  export type PessoasFindManyArgs = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect | null
    /**
     * Filter, which Pessoas to fetch.
     */
    where?: PessoasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pessoas to fetch.
     */
    orderBy?: Enumerable<PessoasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pessoas.
     */
    cursor?: PessoasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pessoas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pessoas.
     */
    skip?: number
    distinct?: Enumerable<PessoasScalarFieldEnum>
  }


  /**
   * Pessoas create
   */
  export type PessoasCreateArgs = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect | null
    /**
     * The data needed to create a Pessoas.
     */
    data: XOR<PessoasCreateInput, PessoasUncheckedCreateInput>
  }


  /**
   * Pessoas createMany
   */
  export type PessoasCreateManyArgs = {
    /**
     * The data used to create many Pessoas.
     */
    data: Enumerable<PessoasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Pessoas update
   */
  export type PessoasUpdateArgs = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect | null
    /**
     * The data needed to update a Pessoas.
     */
    data: XOR<PessoasUpdateInput, PessoasUncheckedUpdateInput>
    /**
     * Choose, which Pessoas to update.
     */
    where: PessoasWhereUniqueInput
  }


  /**
   * Pessoas updateMany
   */
  export type PessoasUpdateManyArgs = {
    /**
     * The data used to update Pessoas.
     */
    data: XOR<PessoasUpdateManyMutationInput, PessoasUncheckedUpdateManyInput>
    /**
     * Filter which Pessoas to update
     */
    where?: PessoasWhereInput
  }


  /**
   * Pessoas upsert
   */
  export type PessoasUpsertArgs = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect | null
    /**
     * The filter to search for the Pessoas to update in case it exists.
     */
    where: PessoasWhereUniqueInput
    /**
     * In case the Pessoas found by the `where` argument doesn't exist, create a new Pessoas with this data.
     */
    create: XOR<PessoasCreateInput, PessoasUncheckedCreateInput>
    /**
     * In case the Pessoas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PessoasUpdateInput, PessoasUncheckedUpdateInput>
  }


  /**
   * Pessoas delete
   */
  export type PessoasDeleteArgs = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect | null
    /**
     * Filter which Pessoas to delete.
     */
    where: PessoasWhereUniqueInput
  }


  /**
   * Pessoas deleteMany
   */
  export type PessoasDeleteManyArgs = {
    /**
     * Filter which Pessoas to delete
     */
    where?: PessoasWhereInput
  }


  /**
   * Pessoas without action
   */
  export type PessoasArgs = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect | null
  }



  /**
   * Model Pagamentos
   */


  export type AggregatePagamentos = {
    _count: PagamentosCountAggregateOutputType | null
    _avg: PagamentosAvgAggregateOutputType | null
    _sum: PagamentosSumAggregateOutputType | null
    _min: PagamentosMinAggregateOutputType | null
    _max: PagamentosMaxAggregateOutputType | null
  }

  export type PagamentosAvgAggregateOutputType = {
    pagamento: number | null
  }

  export type PagamentosSumAggregateOutputType = {
    pagamento: number | null
  }

  export type PagamentosMinAggregateOutputType = {
    pagamento: number | null
    descricao: string | null
  }

  export type PagamentosMaxAggregateOutputType = {
    pagamento: number | null
    descricao: string | null
  }

  export type PagamentosCountAggregateOutputType = {
    pagamento: number
    descricao: number
    _all: number
  }


  export type PagamentosAvgAggregateInputType = {
    pagamento?: true
  }

  export type PagamentosSumAggregateInputType = {
    pagamento?: true
  }

  export type PagamentosMinAggregateInputType = {
    pagamento?: true
    descricao?: true
  }

  export type PagamentosMaxAggregateInputType = {
    pagamento?: true
    descricao?: true
  }

  export type PagamentosCountAggregateInputType = {
    pagamento?: true
    descricao?: true
    _all?: true
  }

  export type PagamentosAggregateArgs = {
    /**
     * Filter which Pagamentos to aggregate.
     */
    where?: PagamentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagamentos to fetch.
     */
    orderBy?: Enumerable<PagamentosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PagamentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pagamentos
    **/
    _count?: true | PagamentosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PagamentosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PagamentosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PagamentosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PagamentosMaxAggregateInputType
  }

  export type GetPagamentosAggregateType<T extends PagamentosAggregateArgs> = {
        [P in keyof T & keyof AggregatePagamentos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePagamentos[P]>
      : GetScalarType<T[P], AggregatePagamentos[P]>
  }




  export type PagamentosGroupByArgs = {
    where?: PagamentosWhereInput
    orderBy?: Enumerable<PagamentosOrderByWithAggregationInput>
    by: PagamentosScalarFieldEnum[]
    having?: PagamentosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PagamentosCountAggregateInputType | true
    _avg?: PagamentosAvgAggregateInputType
    _sum?: PagamentosSumAggregateInputType
    _min?: PagamentosMinAggregateInputType
    _max?: PagamentosMaxAggregateInputType
  }


  export type PagamentosGroupByOutputType = {
    pagamento: number
    descricao: string | null
    _count: PagamentosCountAggregateOutputType | null
    _avg: PagamentosAvgAggregateOutputType | null
    _sum: PagamentosSumAggregateOutputType | null
    _min: PagamentosMinAggregateOutputType | null
    _max: PagamentosMaxAggregateOutputType | null
  }

  type GetPagamentosGroupByPayload<T extends PagamentosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PagamentosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PagamentosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PagamentosGroupByOutputType[P]>
            : GetScalarType<T[P], PagamentosGroupByOutputType[P]>
        }
      >
    >


  export type PagamentosSelect = {
    pagamento?: boolean
    descricao?: boolean
  }


  export type PagamentosGetPayload<S extends boolean | null | undefined | PagamentosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Pagamentos :
    S extends undefined ? never :
    S extends { include: any } & (PagamentosArgs | PagamentosFindManyArgs)
    ? Pagamentos 
    : S extends { select: any } & (PagamentosArgs | PagamentosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Pagamentos ? Pagamentos[P] : never
  } 
      : Pagamentos


  type PagamentosCountArgs = 
    Omit<PagamentosFindManyArgs, 'select' | 'include'> & {
      select?: PagamentosCountAggregateInputType | true
    }

  export interface PagamentosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Pagamentos that matches the filter.
     * @param {PagamentosFindUniqueArgs} args - Arguments to find a Pagamentos
     * @example
     * // Get one Pagamentos
     * const pagamentos = await prisma.pagamentos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PagamentosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PagamentosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Pagamentos'> extends True ? Prisma__PagamentosClient<PagamentosGetPayload<T>> : Prisma__PagamentosClient<PagamentosGetPayload<T> | null, null>

    /**
     * Find one Pagamentos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PagamentosFindUniqueOrThrowArgs} args - Arguments to find a Pagamentos
     * @example
     * // Get one Pagamentos
     * const pagamentos = await prisma.pagamentos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PagamentosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PagamentosFindUniqueOrThrowArgs>
    ): Prisma__PagamentosClient<PagamentosGetPayload<T>>

    /**
     * Find the first Pagamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentosFindFirstArgs} args - Arguments to find a Pagamentos
     * @example
     * // Get one Pagamentos
     * const pagamentos = await prisma.pagamentos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PagamentosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PagamentosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Pagamentos'> extends True ? Prisma__PagamentosClient<PagamentosGetPayload<T>> : Prisma__PagamentosClient<PagamentosGetPayload<T> | null, null>

    /**
     * Find the first Pagamentos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentosFindFirstOrThrowArgs} args - Arguments to find a Pagamentos
     * @example
     * // Get one Pagamentos
     * const pagamentos = await prisma.pagamentos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PagamentosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PagamentosFindFirstOrThrowArgs>
    ): Prisma__PagamentosClient<PagamentosGetPayload<T>>

    /**
     * Find zero or more Pagamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pagamentos
     * const pagamentos = await prisma.pagamentos.findMany()
     * 
     * // Get first 10 Pagamentos
     * const pagamentos = await prisma.pagamentos.findMany({ take: 10 })
     * 
     * // Only select the `pagamento`
     * const pagamentosWithPagamentoOnly = await prisma.pagamentos.findMany({ select: { pagamento: true } })
     * 
    **/
    findMany<T extends PagamentosFindManyArgs>(
      args?: SelectSubset<T, PagamentosFindManyArgs>
    ): Prisma.PrismaPromise<Array<PagamentosGetPayload<T>>>

    /**
     * Create a Pagamentos.
     * @param {PagamentosCreateArgs} args - Arguments to create a Pagamentos.
     * @example
     * // Create one Pagamentos
     * const Pagamentos = await prisma.pagamentos.create({
     *   data: {
     *     // ... data to create a Pagamentos
     *   }
     * })
     * 
    **/
    create<T extends PagamentosCreateArgs>(
      args: SelectSubset<T, PagamentosCreateArgs>
    ): Prisma__PagamentosClient<PagamentosGetPayload<T>>

    /**
     * Create many Pagamentos.
     *     @param {PagamentosCreateManyArgs} args - Arguments to create many Pagamentos.
     *     @example
     *     // Create many Pagamentos
     *     const pagamentos = await prisma.pagamentos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PagamentosCreateManyArgs>(
      args?: SelectSubset<T, PagamentosCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pagamentos.
     * @param {PagamentosDeleteArgs} args - Arguments to delete one Pagamentos.
     * @example
     * // Delete one Pagamentos
     * const Pagamentos = await prisma.pagamentos.delete({
     *   where: {
     *     // ... filter to delete one Pagamentos
     *   }
     * })
     * 
    **/
    delete<T extends PagamentosDeleteArgs>(
      args: SelectSubset<T, PagamentosDeleteArgs>
    ): Prisma__PagamentosClient<PagamentosGetPayload<T>>

    /**
     * Update one Pagamentos.
     * @param {PagamentosUpdateArgs} args - Arguments to update one Pagamentos.
     * @example
     * // Update one Pagamentos
     * const pagamentos = await prisma.pagamentos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PagamentosUpdateArgs>(
      args: SelectSubset<T, PagamentosUpdateArgs>
    ): Prisma__PagamentosClient<PagamentosGetPayload<T>>

    /**
     * Delete zero or more Pagamentos.
     * @param {PagamentosDeleteManyArgs} args - Arguments to filter Pagamentos to delete.
     * @example
     * // Delete a few Pagamentos
     * const { count } = await prisma.pagamentos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PagamentosDeleteManyArgs>(
      args?: SelectSubset<T, PagamentosDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pagamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pagamentos
     * const pagamentos = await prisma.pagamentos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PagamentosUpdateManyArgs>(
      args: SelectSubset<T, PagamentosUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pagamentos.
     * @param {PagamentosUpsertArgs} args - Arguments to update or create a Pagamentos.
     * @example
     * // Update or create a Pagamentos
     * const pagamentos = await prisma.pagamentos.upsert({
     *   create: {
     *     // ... data to create a Pagamentos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pagamentos we want to update
     *   }
     * })
    **/
    upsert<T extends PagamentosUpsertArgs>(
      args: SelectSubset<T, PagamentosUpsertArgs>
    ): Prisma__PagamentosClient<PagamentosGetPayload<T>>

    /**
     * Count the number of Pagamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentosCountArgs} args - Arguments to filter Pagamentos to count.
     * @example
     * // Count the number of Pagamentos
     * const count = await prisma.pagamentos.count({
     *   where: {
     *     // ... the filter for the Pagamentos we want to count
     *   }
     * })
    **/
    count<T extends PagamentosCountArgs>(
      args?: Subset<T, PagamentosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PagamentosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pagamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PagamentosAggregateArgs>(args: Subset<T, PagamentosAggregateArgs>): Prisma.PrismaPromise<GetPagamentosAggregateType<T>>

    /**
     * Group by Pagamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PagamentosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PagamentosGroupByArgs['orderBy'] }
        : { orderBy?: PagamentosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PagamentosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPagamentosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Pagamentos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PagamentosClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Pagamentos base type for findUnique actions
   */
  export type PagamentosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Pagamentos
     */
    select?: PagamentosSelect | null
    /**
     * Filter, which Pagamentos to fetch.
     */
    where: PagamentosWhereUniqueInput
  }

  /**
   * Pagamentos findUnique
   */
  export interface PagamentosFindUniqueArgs extends PagamentosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pagamentos findUniqueOrThrow
   */
  export type PagamentosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Pagamentos
     */
    select?: PagamentosSelect | null
    /**
     * Filter, which Pagamentos to fetch.
     */
    where: PagamentosWhereUniqueInput
  }


  /**
   * Pagamentos base type for findFirst actions
   */
  export type PagamentosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Pagamentos
     */
    select?: PagamentosSelect | null
    /**
     * Filter, which Pagamentos to fetch.
     */
    where?: PagamentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagamentos to fetch.
     */
    orderBy?: Enumerable<PagamentosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pagamentos.
     */
    cursor?: PagamentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pagamentos.
     */
    distinct?: Enumerable<PagamentosScalarFieldEnum>
  }

  /**
   * Pagamentos findFirst
   */
  export interface PagamentosFindFirstArgs extends PagamentosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pagamentos findFirstOrThrow
   */
  export type PagamentosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Pagamentos
     */
    select?: PagamentosSelect | null
    /**
     * Filter, which Pagamentos to fetch.
     */
    where?: PagamentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagamentos to fetch.
     */
    orderBy?: Enumerable<PagamentosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pagamentos.
     */
    cursor?: PagamentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pagamentos.
     */
    distinct?: Enumerable<PagamentosScalarFieldEnum>
  }


  /**
   * Pagamentos findMany
   */
  export type PagamentosFindManyArgs = {
    /**
     * Select specific fields to fetch from the Pagamentos
     */
    select?: PagamentosSelect | null
    /**
     * Filter, which Pagamentos to fetch.
     */
    where?: PagamentosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagamentos to fetch.
     */
    orderBy?: Enumerable<PagamentosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pagamentos.
     */
    cursor?: PagamentosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagamentos.
     */
    skip?: number
    distinct?: Enumerable<PagamentosScalarFieldEnum>
  }


  /**
   * Pagamentos create
   */
  export type PagamentosCreateArgs = {
    /**
     * Select specific fields to fetch from the Pagamentos
     */
    select?: PagamentosSelect | null
    /**
     * The data needed to create a Pagamentos.
     */
    data: XOR<PagamentosCreateInput, PagamentosUncheckedCreateInput>
  }


  /**
   * Pagamentos createMany
   */
  export type PagamentosCreateManyArgs = {
    /**
     * The data used to create many Pagamentos.
     */
    data: Enumerable<PagamentosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Pagamentos update
   */
  export type PagamentosUpdateArgs = {
    /**
     * Select specific fields to fetch from the Pagamentos
     */
    select?: PagamentosSelect | null
    /**
     * The data needed to update a Pagamentos.
     */
    data: XOR<PagamentosUpdateInput, PagamentosUncheckedUpdateInput>
    /**
     * Choose, which Pagamentos to update.
     */
    where: PagamentosWhereUniqueInput
  }


  /**
   * Pagamentos updateMany
   */
  export type PagamentosUpdateManyArgs = {
    /**
     * The data used to update Pagamentos.
     */
    data: XOR<PagamentosUpdateManyMutationInput, PagamentosUncheckedUpdateManyInput>
    /**
     * Filter which Pagamentos to update
     */
    where?: PagamentosWhereInput
  }


  /**
   * Pagamentos upsert
   */
  export type PagamentosUpsertArgs = {
    /**
     * Select specific fields to fetch from the Pagamentos
     */
    select?: PagamentosSelect | null
    /**
     * The filter to search for the Pagamentos to update in case it exists.
     */
    where: PagamentosWhereUniqueInput
    /**
     * In case the Pagamentos found by the `where` argument doesn't exist, create a new Pagamentos with this data.
     */
    create: XOR<PagamentosCreateInput, PagamentosUncheckedCreateInput>
    /**
     * In case the Pagamentos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PagamentosUpdateInput, PagamentosUncheckedUpdateInput>
  }


  /**
   * Pagamentos delete
   */
  export type PagamentosDeleteArgs = {
    /**
     * Select specific fields to fetch from the Pagamentos
     */
    select?: PagamentosSelect | null
    /**
     * Filter which Pagamentos to delete.
     */
    where: PagamentosWhereUniqueInput
  }


  /**
   * Pagamentos deleteMany
   */
  export type PagamentosDeleteManyArgs = {
    /**
     * Filter which Pagamentos to delete
     */
    where?: PagamentosWhereInput
  }


  /**
   * Pagamentos without action
   */
  export type PagamentosArgs = {
    /**
     * Select specific fields to fetch from the Pagamentos
     */
    select?: PagamentosSelect | null
  }



  /**
   * Model clientes_cluster
   */


  export type AggregateClientes_cluster = {
    _count: Clientes_clusterCountAggregateOutputType | null
    _avg: Clientes_clusterAvgAggregateOutputType | null
    _sum: Clientes_clusterSumAggregateOutputType | null
    _min: Clientes_clusterMinAggregateOutputType | null
    _max: Clientes_clusterMaxAggregateOutputType | null
  }

  export type Clientes_clusterAvgAggregateOutputType = {
    id: number | null
    idade: number | null
    cluster: number | null
  }

  export type Clientes_clusterSumAggregateOutputType = {
    id: number | null
    idade: number | null
    cluster: number | null
  }

  export type Clientes_clusterMinAggregateOutputType = {
    id: number | null
    nome: string | null
    idade: number | null
    endereco: string | null
    cluster: number | null
  }

  export type Clientes_clusterMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    idade: number | null
    endereco: string | null
    cluster: number | null
  }

  export type Clientes_clusterCountAggregateOutputType = {
    id: number
    nome: number
    idade: number
    endereco: number
    cluster: number
    _all: number
  }


  export type Clientes_clusterAvgAggregateInputType = {
    id?: true
    idade?: true
    cluster?: true
  }

  export type Clientes_clusterSumAggregateInputType = {
    id?: true
    idade?: true
    cluster?: true
  }

  export type Clientes_clusterMinAggregateInputType = {
    id?: true
    nome?: true
    idade?: true
    endereco?: true
    cluster?: true
  }

  export type Clientes_clusterMaxAggregateInputType = {
    id?: true
    nome?: true
    idade?: true
    endereco?: true
    cluster?: true
  }

  export type Clientes_clusterCountAggregateInputType = {
    id?: true
    nome?: true
    idade?: true
    endereco?: true
    cluster?: true
    _all?: true
  }

  export type Clientes_clusterAggregateArgs = {
    /**
     * Filter which clientes_cluster to aggregate.
     */
    where?: clientes_clusterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes_clusters to fetch.
     */
    orderBy?: Enumerable<clientes_clusterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clientes_clusterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes_clusters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes_clusters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clientes_clusters
    **/
    _count?: true | Clientes_clusterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Clientes_clusterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Clientes_clusterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Clientes_clusterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Clientes_clusterMaxAggregateInputType
  }

  export type GetClientes_clusterAggregateType<T extends Clientes_clusterAggregateArgs> = {
        [P in keyof T & keyof AggregateClientes_cluster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientes_cluster[P]>
      : GetScalarType<T[P], AggregateClientes_cluster[P]>
  }




  export type Clientes_clusterGroupByArgs = {
    where?: clientes_clusterWhereInput
    orderBy?: Enumerable<clientes_clusterOrderByWithAggregationInput>
    by: Clientes_clusterScalarFieldEnum[]
    having?: clientes_clusterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Clientes_clusterCountAggregateInputType | true
    _avg?: Clientes_clusterAvgAggregateInputType
    _sum?: Clientes_clusterSumAggregateInputType
    _min?: Clientes_clusterMinAggregateInputType
    _max?: Clientes_clusterMaxAggregateInputType
  }


  export type Clientes_clusterGroupByOutputType = {
    id: number
    nome: string | null
    idade: number | null
    endereco: string | null
    cluster: number | null
    _count: Clientes_clusterCountAggregateOutputType | null
    _avg: Clientes_clusterAvgAggregateOutputType | null
    _sum: Clientes_clusterSumAggregateOutputType | null
    _min: Clientes_clusterMinAggregateOutputType | null
    _max: Clientes_clusterMaxAggregateOutputType | null
  }

  type GetClientes_clusterGroupByPayload<T extends Clientes_clusterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Clientes_clusterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Clientes_clusterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Clientes_clusterGroupByOutputType[P]>
            : GetScalarType<T[P], Clientes_clusterGroupByOutputType[P]>
        }
      >
    >


  export type clientes_clusterSelect = {
    id?: boolean
    nome?: boolean
    idade?: boolean
    endereco?: boolean
    cluster?: boolean
  }


  export type clientes_clusterGetPayload<S extends boolean | null | undefined | clientes_clusterArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? clientes_cluster :
    S extends undefined ? never :
    S extends { include: any } & (clientes_clusterArgs | clientes_clusterFindManyArgs)
    ? clientes_cluster 
    : S extends { select: any } & (clientes_clusterArgs | clientes_clusterFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof clientes_cluster ? clientes_cluster[P] : never
  } 
      : clientes_cluster


  type clientes_clusterCountArgs = 
    Omit<clientes_clusterFindManyArgs, 'select' | 'include'> & {
      select?: Clientes_clusterCountAggregateInputType | true
    }

  export interface clientes_clusterDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Clientes_cluster that matches the filter.
     * @param {clientes_clusterFindUniqueArgs} args - Arguments to find a Clientes_cluster
     * @example
     * // Get one Clientes_cluster
     * const clientes_cluster = await prisma.clientes_cluster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends clientes_clusterFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, clientes_clusterFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'clientes_cluster'> extends True ? Prisma__clientes_clusterClient<clientes_clusterGetPayload<T>> : Prisma__clientes_clusterClient<clientes_clusterGetPayload<T> | null, null>

    /**
     * Find one Clientes_cluster that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {clientes_clusterFindUniqueOrThrowArgs} args - Arguments to find a Clientes_cluster
     * @example
     * // Get one Clientes_cluster
     * const clientes_cluster = await prisma.clientes_cluster.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends clientes_clusterFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, clientes_clusterFindUniqueOrThrowArgs>
    ): Prisma__clientes_clusterClient<clientes_clusterGetPayload<T>>

    /**
     * Find the first Clientes_cluster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientes_clusterFindFirstArgs} args - Arguments to find a Clientes_cluster
     * @example
     * // Get one Clientes_cluster
     * const clientes_cluster = await prisma.clientes_cluster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends clientes_clusterFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, clientes_clusterFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'clientes_cluster'> extends True ? Prisma__clientes_clusterClient<clientes_clusterGetPayload<T>> : Prisma__clientes_clusterClient<clientes_clusterGetPayload<T> | null, null>

    /**
     * Find the first Clientes_cluster that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientes_clusterFindFirstOrThrowArgs} args - Arguments to find a Clientes_cluster
     * @example
     * // Get one Clientes_cluster
     * const clientes_cluster = await prisma.clientes_cluster.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends clientes_clusterFindFirstOrThrowArgs>(
      args?: SelectSubset<T, clientes_clusterFindFirstOrThrowArgs>
    ): Prisma__clientes_clusterClient<clientes_clusterGetPayload<T>>

    /**
     * Find zero or more Clientes_clusters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientes_clusterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes_clusters
     * const clientes_clusters = await prisma.clientes_cluster.findMany()
     * 
     * // Get first 10 Clientes_clusters
     * const clientes_clusters = await prisma.clientes_cluster.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientes_clusterWithIdOnly = await prisma.clientes_cluster.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends clientes_clusterFindManyArgs>(
      args?: SelectSubset<T, clientes_clusterFindManyArgs>
    ): Prisma.PrismaPromise<Array<clientes_clusterGetPayload<T>>>

    /**
     * Create a Clientes_cluster.
     * @param {clientes_clusterCreateArgs} args - Arguments to create a Clientes_cluster.
     * @example
     * // Create one Clientes_cluster
     * const Clientes_cluster = await prisma.clientes_cluster.create({
     *   data: {
     *     // ... data to create a Clientes_cluster
     *   }
     * })
     * 
    **/
    create<T extends clientes_clusterCreateArgs>(
      args: SelectSubset<T, clientes_clusterCreateArgs>
    ): Prisma__clientes_clusterClient<clientes_clusterGetPayload<T>>

    /**
     * Create many Clientes_clusters.
     *     @param {clientes_clusterCreateManyArgs} args - Arguments to create many Clientes_clusters.
     *     @example
     *     // Create many Clientes_clusters
     *     const clientes_cluster = await prisma.clientes_cluster.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends clientes_clusterCreateManyArgs>(
      args?: SelectSubset<T, clientes_clusterCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Clientes_cluster.
     * @param {clientes_clusterDeleteArgs} args - Arguments to delete one Clientes_cluster.
     * @example
     * // Delete one Clientes_cluster
     * const Clientes_cluster = await prisma.clientes_cluster.delete({
     *   where: {
     *     // ... filter to delete one Clientes_cluster
     *   }
     * })
     * 
    **/
    delete<T extends clientes_clusterDeleteArgs>(
      args: SelectSubset<T, clientes_clusterDeleteArgs>
    ): Prisma__clientes_clusterClient<clientes_clusterGetPayload<T>>

    /**
     * Update one Clientes_cluster.
     * @param {clientes_clusterUpdateArgs} args - Arguments to update one Clientes_cluster.
     * @example
     * // Update one Clientes_cluster
     * const clientes_cluster = await prisma.clientes_cluster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends clientes_clusterUpdateArgs>(
      args: SelectSubset<T, clientes_clusterUpdateArgs>
    ): Prisma__clientes_clusterClient<clientes_clusterGetPayload<T>>

    /**
     * Delete zero or more Clientes_clusters.
     * @param {clientes_clusterDeleteManyArgs} args - Arguments to filter Clientes_clusters to delete.
     * @example
     * // Delete a few Clientes_clusters
     * const { count } = await prisma.clientes_cluster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends clientes_clusterDeleteManyArgs>(
      args?: SelectSubset<T, clientes_clusterDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes_clusters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientes_clusterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes_clusters
     * const clientes_cluster = await prisma.clientes_cluster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends clientes_clusterUpdateManyArgs>(
      args: SelectSubset<T, clientes_clusterUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Clientes_cluster.
     * @param {clientes_clusterUpsertArgs} args - Arguments to update or create a Clientes_cluster.
     * @example
     * // Update or create a Clientes_cluster
     * const clientes_cluster = await prisma.clientes_cluster.upsert({
     *   create: {
     *     // ... data to create a Clientes_cluster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clientes_cluster we want to update
     *   }
     * })
    **/
    upsert<T extends clientes_clusterUpsertArgs>(
      args: SelectSubset<T, clientes_clusterUpsertArgs>
    ): Prisma__clientes_clusterClient<clientes_clusterGetPayload<T>>

    /**
     * Count the number of Clientes_clusters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientes_clusterCountArgs} args - Arguments to filter Clientes_clusters to count.
     * @example
     * // Count the number of Clientes_clusters
     * const count = await prisma.clientes_cluster.count({
     *   where: {
     *     // ... the filter for the Clientes_clusters we want to count
     *   }
     * })
    **/
    count<T extends clientes_clusterCountArgs>(
      args?: Subset<T, clientes_clusterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Clientes_clusterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clientes_cluster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Clientes_clusterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Clientes_clusterAggregateArgs>(args: Subset<T, Clientes_clusterAggregateArgs>): Prisma.PrismaPromise<GetClientes_clusterAggregateType<T>>

    /**
     * Group by Clientes_cluster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Clientes_clusterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Clientes_clusterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Clientes_clusterGroupByArgs['orderBy'] }
        : { orderBy?: Clientes_clusterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Clientes_clusterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientes_clusterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for clientes_cluster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__clientes_clusterClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * clientes_cluster base type for findUnique actions
   */
  export type clientes_clusterFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the clientes_cluster
     */
    select?: clientes_clusterSelect | null
    /**
     * Filter, which clientes_cluster to fetch.
     */
    where: clientes_clusterWhereUniqueInput
  }

  /**
   * clientes_cluster findUnique
   */
  export interface clientes_clusterFindUniqueArgs extends clientes_clusterFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * clientes_cluster findUniqueOrThrow
   */
  export type clientes_clusterFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the clientes_cluster
     */
    select?: clientes_clusterSelect | null
    /**
     * Filter, which clientes_cluster to fetch.
     */
    where: clientes_clusterWhereUniqueInput
  }


  /**
   * clientes_cluster base type for findFirst actions
   */
  export type clientes_clusterFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the clientes_cluster
     */
    select?: clientes_clusterSelect | null
    /**
     * Filter, which clientes_cluster to fetch.
     */
    where?: clientes_clusterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes_clusters to fetch.
     */
    orderBy?: Enumerable<clientes_clusterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes_clusters.
     */
    cursor?: clientes_clusterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes_clusters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes_clusters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes_clusters.
     */
    distinct?: Enumerable<Clientes_clusterScalarFieldEnum>
  }

  /**
   * clientes_cluster findFirst
   */
  export interface clientes_clusterFindFirstArgs extends clientes_clusterFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * clientes_cluster findFirstOrThrow
   */
  export type clientes_clusterFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the clientes_cluster
     */
    select?: clientes_clusterSelect | null
    /**
     * Filter, which clientes_cluster to fetch.
     */
    where?: clientes_clusterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes_clusters to fetch.
     */
    orderBy?: Enumerable<clientes_clusterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes_clusters.
     */
    cursor?: clientes_clusterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes_clusters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes_clusters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes_clusters.
     */
    distinct?: Enumerable<Clientes_clusterScalarFieldEnum>
  }


  /**
   * clientes_cluster findMany
   */
  export type clientes_clusterFindManyArgs = {
    /**
     * Select specific fields to fetch from the clientes_cluster
     */
    select?: clientes_clusterSelect | null
    /**
     * Filter, which clientes_clusters to fetch.
     */
    where?: clientes_clusterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes_clusters to fetch.
     */
    orderBy?: Enumerable<clientes_clusterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clientes_clusters.
     */
    cursor?: clientes_clusterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes_clusters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes_clusters.
     */
    skip?: number
    distinct?: Enumerable<Clientes_clusterScalarFieldEnum>
  }


  /**
   * clientes_cluster create
   */
  export type clientes_clusterCreateArgs = {
    /**
     * Select specific fields to fetch from the clientes_cluster
     */
    select?: clientes_clusterSelect | null
    /**
     * The data needed to create a clientes_cluster.
     */
    data: XOR<clientes_clusterCreateInput, clientes_clusterUncheckedCreateInput>
  }


  /**
   * clientes_cluster createMany
   */
  export type clientes_clusterCreateManyArgs = {
    /**
     * The data used to create many clientes_clusters.
     */
    data: Enumerable<clientes_clusterCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * clientes_cluster update
   */
  export type clientes_clusterUpdateArgs = {
    /**
     * Select specific fields to fetch from the clientes_cluster
     */
    select?: clientes_clusterSelect | null
    /**
     * The data needed to update a clientes_cluster.
     */
    data: XOR<clientes_clusterUpdateInput, clientes_clusterUncheckedUpdateInput>
    /**
     * Choose, which clientes_cluster to update.
     */
    where: clientes_clusterWhereUniqueInput
  }


  /**
   * clientes_cluster updateMany
   */
  export type clientes_clusterUpdateManyArgs = {
    /**
     * The data used to update clientes_clusters.
     */
    data: XOR<clientes_clusterUpdateManyMutationInput, clientes_clusterUncheckedUpdateManyInput>
    /**
     * Filter which clientes_clusters to update
     */
    where?: clientes_clusterWhereInput
  }


  /**
   * clientes_cluster upsert
   */
  export type clientes_clusterUpsertArgs = {
    /**
     * Select specific fields to fetch from the clientes_cluster
     */
    select?: clientes_clusterSelect | null
    /**
     * The filter to search for the clientes_cluster to update in case it exists.
     */
    where: clientes_clusterWhereUniqueInput
    /**
     * In case the clientes_cluster found by the `where` argument doesn't exist, create a new clientes_cluster with this data.
     */
    create: XOR<clientes_clusterCreateInput, clientes_clusterUncheckedCreateInput>
    /**
     * In case the clientes_cluster was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clientes_clusterUpdateInput, clientes_clusterUncheckedUpdateInput>
  }


  /**
   * clientes_cluster delete
   */
  export type clientes_clusterDeleteArgs = {
    /**
     * Select specific fields to fetch from the clientes_cluster
     */
    select?: clientes_clusterSelect | null
    /**
     * Filter which clientes_cluster to delete.
     */
    where: clientes_clusterWhereUniqueInput
  }


  /**
   * clientes_cluster deleteMany
   */
  export type clientes_clusterDeleteManyArgs = {
    /**
     * Filter which clientes_clusters to delete
     */
    where?: clientes_clusterWhereInput
  }


  /**
   * clientes_cluster without action
   */
  export type clientes_clusterArgs = {
    /**
     * Select specific fields to fetch from the clientes_cluster
     */
    select?: clientes_clusterSelect | null
  }



  /**
   * Model clusters
   */


  export type AggregateClusters = {
    _count: ClustersCountAggregateOutputType | null
    _avg: ClustersAvgAggregateOutputType | null
    _sum: ClustersSumAggregateOutputType | null
    _min: ClustersMinAggregateOutputType | null
    _max: ClustersMaxAggregateOutputType | null
  }

  export type ClustersAvgAggregateOutputType = {
    cluster: number | null
  }

  export type ClustersSumAggregateOutputType = {
    cluster: number | null
  }

  export type ClustersMinAggregateOutputType = {
    cluster: number | null
    descricao: string | null
  }

  export type ClustersMaxAggregateOutputType = {
    cluster: number | null
    descricao: string | null
  }

  export type ClustersCountAggregateOutputType = {
    cluster: number
    descricao: number
    _all: number
  }


  export type ClustersAvgAggregateInputType = {
    cluster?: true
  }

  export type ClustersSumAggregateInputType = {
    cluster?: true
  }

  export type ClustersMinAggregateInputType = {
    cluster?: true
    descricao?: true
  }

  export type ClustersMaxAggregateInputType = {
    cluster?: true
    descricao?: true
  }

  export type ClustersCountAggregateInputType = {
    cluster?: true
    descricao?: true
    _all?: true
  }

  export type ClustersAggregateArgs = {
    /**
     * Filter which clusters to aggregate.
     */
    where?: clustersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clusters to fetch.
     */
    orderBy?: Enumerable<clustersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clustersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clusters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clusters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clusters
    **/
    _count?: true | ClustersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClustersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClustersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClustersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClustersMaxAggregateInputType
  }

  export type GetClustersAggregateType<T extends ClustersAggregateArgs> = {
        [P in keyof T & keyof AggregateClusters]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClusters[P]>
      : GetScalarType<T[P], AggregateClusters[P]>
  }




  export type ClustersGroupByArgs = {
    where?: clustersWhereInput
    orderBy?: Enumerable<clustersOrderByWithAggregationInput>
    by: ClustersScalarFieldEnum[]
    having?: clustersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClustersCountAggregateInputType | true
    _avg?: ClustersAvgAggregateInputType
    _sum?: ClustersSumAggregateInputType
    _min?: ClustersMinAggregateInputType
    _max?: ClustersMaxAggregateInputType
  }


  export type ClustersGroupByOutputType = {
    cluster: number
    descricao: string | null
    _count: ClustersCountAggregateOutputType | null
    _avg: ClustersAvgAggregateOutputType | null
    _sum: ClustersSumAggregateOutputType | null
    _min: ClustersMinAggregateOutputType | null
    _max: ClustersMaxAggregateOutputType | null
  }

  type GetClustersGroupByPayload<T extends ClustersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClustersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClustersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClustersGroupByOutputType[P]>
            : GetScalarType<T[P], ClustersGroupByOutputType[P]>
        }
      >
    >


  export type clustersSelect = {
    cluster?: boolean
    descricao?: boolean
  }


  export type clustersGetPayload<S extends boolean | null | undefined | clustersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? clusters :
    S extends undefined ? never :
    S extends { include: any } & (clustersArgs | clustersFindManyArgs)
    ? clusters 
    : S extends { select: any } & (clustersArgs | clustersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof clusters ? clusters[P] : never
  } 
      : clusters


  type clustersCountArgs = 
    Omit<clustersFindManyArgs, 'select' | 'include'> & {
      select?: ClustersCountAggregateInputType | true
    }

  export interface clustersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Clusters that matches the filter.
     * @param {clustersFindUniqueArgs} args - Arguments to find a Clusters
     * @example
     * // Get one Clusters
     * const clusters = await prisma.clusters.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends clustersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, clustersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'clusters'> extends True ? Prisma__clustersClient<clustersGetPayload<T>> : Prisma__clustersClient<clustersGetPayload<T> | null, null>

    /**
     * Find one Clusters that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {clustersFindUniqueOrThrowArgs} args - Arguments to find a Clusters
     * @example
     * // Get one Clusters
     * const clusters = await prisma.clusters.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends clustersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, clustersFindUniqueOrThrowArgs>
    ): Prisma__clustersClient<clustersGetPayload<T>>

    /**
     * Find the first Clusters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clustersFindFirstArgs} args - Arguments to find a Clusters
     * @example
     * // Get one Clusters
     * const clusters = await prisma.clusters.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends clustersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, clustersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'clusters'> extends True ? Prisma__clustersClient<clustersGetPayload<T>> : Prisma__clustersClient<clustersGetPayload<T> | null, null>

    /**
     * Find the first Clusters that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clustersFindFirstOrThrowArgs} args - Arguments to find a Clusters
     * @example
     * // Get one Clusters
     * const clusters = await prisma.clusters.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends clustersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, clustersFindFirstOrThrowArgs>
    ): Prisma__clustersClient<clustersGetPayload<T>>

    /**
     * Find zero or more Clusters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clustersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clusters
     * const clusters = await prisma.clusters.findMany()
     * 
     * // Get first 10 Clusters
     * const clusters = await prisma.clusters.findMany({ take: 10 })
     * 
     * // Only select the `cluster`
     * const clustersWithClusterOnly = await prisma.clusters.findMany({ select: { cluster: true } })
     * 
    **/
    findMany<T extends clustersFindManyArgs>(
      args?: SelectSubset<T, clustersFindManyArgs>
    ): Prisma.PrismaPromise<Array<clustersGetPayload<T>>>

    /**
     * Create a Clusters.
     * @param {clustersCreateArgs} args - Arguments to create a Clusters.
     * @example
     * // Create one Clusters
     * const Clusters = await prisma.clusters.create({
     *   data: {
     *     // ... data to create a Clusters
     *   }
     * })
     * 
    **/
    create<T extends clustersCreateArgs>(
      args: SelectSubset<T, clustersCreateArgs>
    ): Prisma__clustersClient<clustersGetPayload<T>>

    /**
     * Create many Clusters.
     *     @param {clustersCreateManyArgs} args - Arguments to create many Clusters.
     *     @example
     *     // Create many Clusters
     *     const clusters = await prisma.clusters.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends clustersCreateManyArgs>(
      args?: SelectSubset<T, clustersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Clusters.
     * @param {clustersDeleteArgs} args - Arguments to delete one Clusters.
     * @example
     * // Delete one Clusters
     * const Clusters = await prisma.clusters.delete({
     *   where: {
     *     // ... filter to delete one Clusters
     *   }
     * })
     * 
    **/
    delete<T extends clustersDeleteArgs>(
      args: SelectSubset<T, clustersDeleteArgs>
    ): Prisma__clustersClient<clustersGetPayload<T>>

    /**
     * Update one Clusters.
     * @param {clustersUpdateArgs} args - Arguments to update one Clusters.
     * @example
     * // Update one Clusters
     * const clusters = await prisma.clusters.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends clustersUpdateArgs>(
      args: SelectSubset<T, clustersUpdateArgs>
    ): Prisma__clustersClient<clustersGetPayload<T>>

    /**
     * Delete zero or more Clusters.
     * @param {clustersDeleteManyArgs} args - Arguments to filter Clusters to delete.
     * @example
     * // Delete a few Clusters
     * const { count } = await prisma.clusters.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends clustersDeleteManyArgs>(
      args?: SelectSubset<T, clustersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clusters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clustersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clusters
     * const clusters = await prisma.clusters.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends clustersUpdateManyArgs>(
      args: SelectSubset<T, clustersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Clusters.
     * @param {clustersUpsertArgs} args - Arguments to update or create a Clusters.
     * @example
     * // Update or create a Clusters
     * const clusters = await prisma.clusters.upsert({
     *   create: {
     *     // ... data to create a Clusters
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clusters we want to update
     *   }
     * })
    **/
    upsert<T extends clustersUpsertArgs>(
      args: SelectSubset<T, clustersUpsertArgs>
    ): Prisma__clustersClient<clustersGetPayload<T>>

    /**
     * Count the number of Clusters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clustersCountArgs} args - Arguments to filter Clusters to count.
     * @example
     * // Count the number of Clusters
     * const count = await prisma.clusters.count({
     *   where: {
     *     // ... the filter for the Clusters we want to count
     *   }
     * })
    **/
    count<T extends clustersCountArgs>(
      args?: Subset<T, clustersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClustersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clusters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClustersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClustersAggregateArgs>(args: Subset<T, ClustersAggregateArgs>): Prisma.PrismaPromise<GetClustersAggregateType<T>>

    /**
     * Group by Clusters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClustersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClustersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClustersGroupByArgs['orderBy'] }
        : { orderBy?: ClustersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClustersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClustersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for clusters.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__clustersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * clusters base type for findUnique actions
   */
  export type clustersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the clusters
     */
    select?: clustersSelect | null
    /**
     * Filter, which clusters to fetch.
     */
    where: clustersWhereUniqueInput
  }

  /**
   * clusters findUnique
   */
  export interface clustersFindUniqueArgs extends clustersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * clusters findUniqueOrThrow
   */
  export type clustersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the clusters
     */
    select?: clustersSelect | null
    /**
     * Filter, which clusters to fetch.
     */
    where: clustersWhereUniqueInput
  }


  /**
   * clusters base type for findFirst actions
   */
  export type clustersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the clusters
     */
    select?: clustersSelect | null
    /**
     * Filter, which clusters to fetch.
     */
    where?: clustersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clusters to fetch.
     */
    orderBy?: Enumerable<clustersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clusters.
     */
    cursor?: clustersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clusters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clusters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clusters.
     */
    distinct?: Enumerable<ClustersScalarFieldEnum>
  }

  /**
   * clusters findFirst
   */
  export interface clustersFindFirstArgs extends clustersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * clusters findFirstOrThrow
   */
  export type clustersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the clusters
     */
    select?: clustersSelect | null
    /**
     * Filter, which clusters to fetch.
     */
    where?: clustersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clusters to fetch.
     */
    orderBy?: Enumerable<clustersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clusters.
     */
    cursor?: clustersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clusters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clusters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clusters.
     */
    distinct?: Enumerable<ClustersScalarFieldEnum>
  }


  /**
   * clusters findMany
   */
  export type clustersFindManyArgs = {
    /**
     * Select specific fields to fetch from the clusters
     */
    select?: clustersSelect | null
    /**
     * Filter, which clusters to fetch.
     */
    where?: clustersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clusters to fetch.
     */
    orderBy?: Enumerable<clustersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clusters.
     */
    cursor?: clustersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clusters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clusters.
     */
    skip?: number
    distinct?: Enumerable<ClustersScalarFieldEnum>
  }


  /**
   * clusters create
   */
  export type clustersCreateArgs = {
    /**
     * Select specific fields to fetch from the clusters
     */
    select?: clustersSelect | null
    /**
     * The data needed to create a clusters.
     */
    data: XOR<clustersCreateInput, clustersUncheckedCreateInput>
  }


  /**
   * clusters createMany
   */
  export type clustersCreateManyArgs = {
    /**
     * The data used to create many clusters.
     */
    data: Enumerable<clustersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * clusters update
   */
  export type clustersUpdateArgs = {
    /**
     * Select specific fields to fetch from the clusters
     */
    select?: clustersSelect | null
    /**
     * The data needed to update a clusters.
     */
    data: XOR<clustersUpdateInput, clustersUncheckedUpdateInput>
    /**
     * Choose, which clusters to update.
     */
    where: clustersWhereUniqueInput
  }


  /**
   * clusters updateMany
   */
  export type clustersUpdateManyArgs = {
    /**
     * The data used to update clusters.
     */
    data: XOR<clustersUpdateManyMutationInput, clustersUncheckedUpdateManyInput>
    /**
     * Filter which clusters to update
     */
    where?: clustersWhereInput
  }


  /**
   * clusters upsert
   */
  export type clustersUpsertArgs = {
    /**
     * Select specific fields to fetch from the clusters
     */
    select?: clustersSelect | null
    /**
     * The filter to search for the clusters to update in case it exists.
     */
    where: clustersWhereUniqueInput
    /**
     * In case the clusters found by the `where` argument doesn't exist, create a new clusters with this data.
     */
    create: XOR<clustersCreateInput, clustersUncheckedCreateInput>
    /**
     * In case the clusters was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clustersUpdateInput, clustersUncheckedUpdateInput>
  }


  /**
   * clusters delete
   */
  export type clustersDeleteArgs = {
    /**
     * Select specific fields to fetch from the clusters
     */
    select?: clustersSelect | null
    /**
     * Filter which clusters to delete.
     */
    where: clustersWhereUniqueInput
  }


  /**
   * clusters deleteMany
   */
  export type clustersDeleteManyArgs = {
    /**
     * Filter which clusters to delete
     */
    where?: clustersWhereInput
  }


  /**
   * clusters without action
   */
  export type clustersArgs = {
    /**
     * Select specific fields to fetch from the clusters
     */
    select?: clustersSelect | null
  }



  /**
   * Model vendas
   */


  export type AggregateVendas = {
    _count: VendasCountAggregateOutputType | null
    _avg: VendasAvgAggregateOutputType | null
    _sum: VendasSumAggregateOutputType | null
    _min: VendasMinAggregateOutputType | null
    _max: VendasMaxAggregateOutputType | null
  }

  export type VendasAvgAggregateOutputType = {
    id: number | null
    id_cliente: number | null
    id_produto: number | null
    valor: Decimal | null
    pagamento: number | null
  }

  export type VendasSumAggregateOutputType = {
    id: number | null
    id_cliente: number | null
    id_produto: number | null
    valor: Decimal | null
    pagamento: number | null
  }

  export type VendasMinAggregateOutputType = {
    id: number | null
    id_cliente: number | null
    id_produto: number | null
    data_venda: Date | null
    valor: Decimal | null
    pagamento: number | null
  }

  export type VendasMaxAggregateOutputType = {
    id: number | null
    id_cliente: number | null
    id_produto: number | null
    data_venda: Date | null
    valor: Decimal | null
    pagamento: number | null
  }

  export type VendasCountAggregateOutputType = {
    id: number
    id_cliente: number
    id_produto: number
    data_venda: number
    valor: number
    pagamento: number
    _all: number
  }


  export type VendasAvgAggregateInputType = {
    id?: true
    id_cliente?: true
    id_produto?: true
    valor?: true
    pagamento?: true
  }

  export type VendasSumAggregateInputType = {
    id?: true
    id_cliente?: true
    id_produto?: true
    valor?: true
    pagamento?: true
  }

  export type VendasMinAggregateInputType = {
    id?: true
    id_cliente?: true
    id_produto?: true
    data_venda?: true
    valor?: true
    pagamento?: true
  }

  export type VendasMaxAggregateInputType = {
    id?: true
    id_cliente?: true
    id_produto?: true
    data_venda?: true
    valor?: true
    pagamento?: true
  }

  export type VendasCountAggregateInputType = {
    id?: true
    id_cliente?: true
    id_produto?: true
    data_venda?: true
    valor?: true
    pagamento?: true
    _all?: true
  }

  export type VendasAggregateArgs = {
    /**
     * Filter which vendas to aggregate.
     */
    where?: vendasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vendas to fetch.
     */
    orderBy?: Enumerable<vendasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: vendasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned vendas
    **/
    _count?: true | VendasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendasMaxAggregateInputType
  }

  export type GetVendasAggregateType<T extends VendasAggregateArgs> = {
        [P in keyof T & keyof AggregateVendas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendas[P]>
      : GetScalarType<T[P], AggregateVendas[P]>
  }




  export type VendasGroupByArgs = {
    where?: vendasWhereInput
    orderBy?: Enumerable<vendasOrderByWithAggregationInput>
    by: VendasScalarFieldEnum[]
    having?: vendasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendasCountAggregateInputType | true
    _avg?: VendasAvgAggregateInputType
    _sum?: VendasSumAggregateInputType
    _min?: VendasMinAggregateInputType
    _max?: VendasMaxAggregateInputType
  }


  export type VendasGroupByOutputType = {
    id: number
    id_cliente: number | null
    id_produto: number | null
    data_venda: Date | null
    valor: Decimal | null
    pagamento: number | null
    _count: VendasCountAggregateOutputType | null
    _avg: VendasAvgAggregateOutputType | null
    _sum: VendasSumAggregateOutputType | null
    _min: VendasMinAggregateOutputType | null
    _max: VendasMaxAggregateOutputType | null
  }

  type GetVendasGroupByPayload<T extends VendasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VendasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendasGroupByOutputType[P]>
            : GetScalarType<T[P], VendasGroupByOutputType[P]>
        }
      >
    >


  export type vendasSelect = {
    id?: boolean
    id_cliente?: boolean
    id_produto?: boolean
    data_venda?: boolean
    valor?: boolean
    pagamento?: boolean
  }


  export type vendasGetPayload<S extends boolean | null | undefined | vendasArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? vendas :
    S extends undefined ? never :
    S extends { include: any } & (vendasArgs | vendasFindManyArgs)
    ? vendas 
    : S extends { select: any } & (vendasArgs | vendasFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof vendas ? vendas[P] : never
  } 
      : vendas


  type vendasCountArgs = 
    Omit<vendasFindManyArgs, 'select' | 'include'> & {
      select?: VendasCountAggregateInputType | true
    }

  export interface vendasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Vendas that matches the filter.
     * @param {vendasFindUniqueArgs} args - Arguments to find a Vendas
     * @example
     * // Get one Vendas
     * const vendas = await prisma.vendas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends vendasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, vendasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'vendas'> extends True ? Prisma__vendasClient<vendasGetPayload<T>> : Prisma__vendasClient<vendasGetPayload<T> | null, null>

    /**
     * Find one Vendas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {vendasFindUniqueOrThrowArgs} args - Arguments to find a Vendas
     * @example
     * // Get one Vendas
     * const vendas = await prisma.vendas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends vendasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, vendasFindUniqueOrThrowArgs>
    ): Prisma__vendasClient<vendasGetPayload<T>>

    /**
     * Find the first Vendas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendasFindFirstArgs} args - Arguments to find a Vendas
     * @example
     * // Get one Vendas
     * const vendas = await prisma.vendas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends vendasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, vendasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'vendas'> extends True ? Prisma__vendasClient<vendasGetPayload<T>> : Prisma__vendasClient<vendasGetPayload<T> | null, null>

    /**
     * Find the first Vendas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendasFindFirstOrThrowArgs} args - Arguments to find a Vendas
     * @example
     * // Get one Vendas
     * const vendas = await prisma.vendas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends vendasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, vendasFindFirstOrThrowArgs>
    ): Prisma__vendasClient<vendasGetPayload<T>>

    /**
     * Find zero or more Vendas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendas
     * const vendas = await prisma.vendas.findMany()
     * 
     * // Get first 10 Vendas
     * const vendas = await prisma.vendas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendasWithIdOnly = await prisma.vendas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends vendasFindManyArgs>(
      args?: SelectSubset<T, vendasFindManyArgs>
    ): Prisma.PrismaPromise<Array<vendasGetPayload<T>>>

    /**
     * Create a Vendas.
     * @param {vendasCreateArgs} args - Arguments to create a Vendas.
     * @example
     * // Create one Vendas
     * const Vendas = await prisma.vendas.create({
     *   data: {
     *     // ... data to create a Vendas
     *   }
     * })
     * 
    **/
    create<T extends vendasCreateArgs>(
      args: SelectSubset<T, vendasCreateArgs>
    ): Prisma__vendasClient<vendasGetPayload<T>>

    /**
     * Create many Vendas.
     *     @param {vendasCreateManyArgs} args - Arguments to create many Vendas.
     *     @example
     *     // Create many Vendas
     *     const vendas = await prisma.vendas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends vendasCreateManyArgs>(
      args?: SelectSubset<T, vendasCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vendas.
     * @param {vendasDeleteArgs} args - Arguments to delete one Vendas.
     * @example
     * // Delete one Vendas
     * const Vendas = await prisma.vendas.delete({
     *   where: {
     *     // ... filter to delete one Vendas
     *   }
     * })
     * 
    **/
    delete<T extends vendasDeleteArgs>(
      args: SelectSubset<T, vendasDeleteArgs>
    ): Prisma__vendasClient<vendasGetPayload<T>>

    /**
     * Update one Vendas.
     * @param {vendasUpdateArgs} args - Arguments to update one Vendas.
     * @example
     * // Update one Vendas
     * const vendas = await prisma.vendas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends vendasUpdateArgs>(
      args: SelectSubset<T, vendasUpdateArgs>
    ): Prisma__vendasClient<vendasGetPayload<T>>

    /**
     * Delete zero or more Vendas.
     * @param {vendasDeleteManyArgs} args - Arguments to filter Vendas to delete.
     * @example
     * // Delete a few Vendas
     * const { count } = await prisma.vendas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends vendasDeleteManyArgs>(
      args?: SelectSubset<T, vendasDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendas
     * const vendas = await prisma.vendas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends vendasUpdateManyArgs>(
      args: SelectSubset<T, vendasUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vendas.
     * @param {vendasUpsertArgs} args - Arguments to update or create a Vendas.
     * @example
     * // Update or create a Vendas
     * const vendas = await prisma.vendas.upsert({
     *   create: {
     *     // ... data to create a Vendas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendas we want to update
     *   }
     * })
    **/
    upsert<T extends vendasUpsertArgs>(
      args: SelectSubset<T, vendasUpsertArgs>
    ): Prisma__vendasClient<vendasGetPayload<T>>

    /**
     * Count the number of Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendasCountArgs} args - Arguments to filter Vendas to count.
     * @example
     * // Count the number of Vendas
     * const count = await prisma.vendas.count({
     *   where: {
     *     // ... the filter for the Vendas we want to count
     *   }
     * })
    **/
    count<T extends vendasCountArgs>(
      args?: Subset<T, vendasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendasAggregateArgs>(args: Subset<T, VendasAggregateArgs>): Prisma.PrismaPromise<GetVendasAggregateType<T>>

    /**
     * Group by Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendasGroupByArgs['orderBy'] }
        : { orderBy?: VendasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for vendas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__vendasClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * vendas base type for findUnique actions
   */
  export type vendasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the vendas
     */
    select?: vendasSelect | null
    /**
     * Filter, which vendas to fetch.
     */
    where: vendasWhereUniqueInput
  }

  /**
   * vendas findUnique
   */
  export interface vendasFindUniqueArgs extends vendasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * vendas findUniqueOrThrow
   */
  export type vendasFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the vendas
     */
    select?: vendasSelect | null
    /**
     * Filter, which vendas to fetch.
     */
    where: vendasWhereUniqueInput
  }


  /**
   * vendas base type for findFirst actions
   */
  export type vendasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the vendas
     */
    select?: vendasSelect | null
    /**
     * Filter, which vendas to fetch.
     */
    where?: vendasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vendas to fetch.
     */
    orderBy?: Enumerable<vendasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for vendas.
     */
    cursor?: vendasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of vendas.
     */
    distinct?: Enumerable<VendasScalarFieldEnum>
  }

  /**
   * vendas findFirst
   */
  export interface vendasFindFirstArgs extends vendasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * vendas findFirstOrThrow
   */
  export type vendasFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the vendas
     */
    select?: vendasSelect | null
    /**
     * Filter, which vendas to fetch.
     */
    where?: vendasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vendas to fetch.
     */
    orderBy?: Enumerable<vendasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for vendas.
     */
    cursor?: vendasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of vendas.
     */
    distinct?: Enumerable<VendasScalarFieldEnum>
  }


  /**
   * vendas findMany
   */
  export type vendasFindManyArgs = {
    /**
     * Select specific fields to fetch from the vendas
     */
    select?: vendasSelect | null
    /**
     * Filter, which vendas to fetch.
     */
    where?: vendasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vendas to fetch.
     */
    orderBy?: Enumerable<vendasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing vendas.
     */
    cursor?: vendasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vendas.
     */
    skip?: number
    distinct?: Enumerable<VendasScalarFieldEnum>
  }


  /**
   * vendas create
   */
  export type vendasCreateArgs = {
    /**
     * Select specific fields to fetch from the vendas
     */
    select?: vendasSelect | null
    /**
     * The data needed to create a vendas.
     */
    data: XOR<vendasCreateInput, vendasUncheckedCreateInput>
  }


  /**
   * vendas createMany
   */
  export type vendasCreateManyArgs = {
    /**
     * The data used to create many vendas.
     */
    data: Enumerable<vendasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * vendas update
   */
  export type vendasUpdateArgs = {
    /**
     * Select specific fields to fetch from the vendas
     */
    select?: vendasSelect | null
    /**
     * The data needed to update a vendas.
     */
    data: XOR<vendasUpdateInput, vendasUncheckedUpdateInput>
    /**
     * Choose, which vendas to update.
     */
    where: vendasWhereUniqueInput
  }


  /**
   * vendas updateMany
   */
  export type vendasUpdateManyArgs = {
    /**
     * The data used to update vendas.
     */
    data: XOR<vendasUpdateManyMutationInput, vendasUncheckedUpdateManyInput>
    /**
     * Filter which vendas to update
     */
    where?: vendasWhereInput
  }


  /**
   * vendas upsert
   */
  export type vendasUpsertArgs = {
    /**
     * Select specific fields to fetch from the vendas
     */
    select?: vendasSelect | null
    /**
     * The filter to search for the vendas to update in case it exists.
     */
    where: vendasWhereUniqueInput
    /**
     * In case the vendas found by the `where` argument doesn't exist, create a new vendas with this data.
     */
    create: XOR<vendasCreateInput, vendasUncheckedCreateInput>
    /**
     * In case the vendas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<vendasUpdateInput, vendasUncheckedUpdateInput>
  }


  /**
   * vendas delete
   */
  export type vendasDeleteArgs = {
    /**
     * Select specific fields to fetch from the vendas
     */
    select?: vendasSelect | null
    /**
     * Filter which vendas to delete.
     */
    where: vendasWhereUniqueInput
  }


  /**
   * vendas deleteMany
   */
  export type vendasDeleteManyArgs = {
    /**
     * Filter which vendas to delete
     */
    where?: vendasWhereInput
  }


  /**
   * vendas without action
   */
  export type vendasArgs = {
    /**
     * Select specific fields to fetch from the vendas
     */
    select?: vendasSelect | null
  }



  /**
   * Enums
   */

  export const Clientes_clusterScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    idade: 'idade',
    endereco: 'endereco',
    cluster: 'cluster'
  };

  export type Clientes_clusterScalarFieldEnum = (typeof Clientes_clusterScalarFieldEnum)[keyof typeof Clientes_clusterScalarFieldEnum]


  export const ClustersScalarFieldEnum: {
    cluster: 'cluster',
    descricao: 'descricao'
  };

  export type ClustersScalarFieldEnum = (typeof ClustersScalarFieldEnum)[keyof typeof ClustersScalarFieldEnum]


  export const PagamentosScalarFieldEnum: {
    pagamento: 'pagamento',
    descricao: 'descricao'
  };

  export type PagamentosScalarFieldEnum = (typeof PagamentosScalarFieldEnum)[keyof typeof PagamentosScalarFieldEnum]


  export const PessoasScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    idade: 'idade',
    endereco: 'endereco'
  };

  export type PessoasScalarFieldEnum = (typeof PessoasScalarFieldEnum)[keyof typeof PessoasScalarFieldEnum]


  export const ProdutosScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    categoria: 'categoria',
    preco: 'preco'
  };

  export type ProdutosScalarFieldEnum = (typeof ProdutosScalarFieldEnum)[keyof typeof ProdutosScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const VendasScalarFieldEnum: {
    id: 'id',
    id_cliente: 'id_cliente',
    id_produto: 'id_produto',
    data_venda: 'data_venda',
    valor: 'valor',
    pagamento: 'pagamento'
  };

  export type VendasScalarFieldEnum = (typeof VendasScalarFieldEnum)[keyof typeof VendasScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type ProdutosWhereInput = {
    AND?: Enumerable<ProdutosWhereInput>
    OR?: Enumerable<ProdutosWhereInput>
    NOT?: Enumerable<ProdutosWhereInput>
    id?: IntFilter | number
    nome?: StringNullableFilter | string | null
    categoria?: StringNullableFilter | string | null
    preco?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type ProdutosOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
    preco?: SortOrder
  }

  export type ProdutosWhereUniqueInput = {
    id?: number
  }

  export type ProdutosOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
    preco?: SortOrder
    _count?: ProdutosCountOrderByAggregateInput
    _avg?: ProdutosAvgOrderByAggregateInput
    _max?: ProdutosMaxOrderByAggregateInput
    _min?: ProdutosMinOrderByAggregateInput
    _sum?: ProdutosSumOrderByAggregateInput
  }

  export type ProdutosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProdutosScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProdutosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProdutosScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringNullableWithAggregatesFilter | string | null
    categoria?: StringNullableWithAggregatesFilter | string | null
    preco?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type PessoasWhereInput = {
    AND?: Enumerable<PessoasWhereInput>
    OR?: Enumerable<PessoasWhereInput>
    NOT?: Enumerable<PessoasWhereInput>
    id?: IntFilter | number
    nome?: StringNullableFilter | string | null
    idade?: IntNullableFilter | number | null
    endereco?: StringNullableFilter | string | null
  }

  export type PessoasOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    idade?: SortOrder
    endereco?: SortOrder
  }

  export type PessoasWhereUniqueInput = {
    id?: number
  }

  export type PessoasOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    idade?: SortOrder
    endereco?: SortOrder
    _count?: PessoasCountOrderByAggregateInput
    _avg?: PessoasAvgOrderByAggregateInput
    _max?: PessoasMaxOrderByAggregateInput
    _min?: PessoasMinOrderByAggregateInput
    _sum?: PessoasSumOrderByAggregateInput
  }

  export type PessoasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PessoasScalarWhereWithAggregatesInput>
    OR?: Enumerable<PessoasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PessoasScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringNullableWithAggregatesFilter | string | null
    idade?: IntNullableWithAggregatesFilter | number | null
    endereco?: StringNullableWithAggregatesFilter | string | null
  }

  export type PagamentosWhereInput = {
    AND?: Enumerable<PagamentosWhereInput>
    OR?: Enumerable<PagamentosWhereInput>
    NOT?: Enumerable<PagamentosWhereInput>
    pagamento?: IntFilter | number
    descricao?: StringNullableFilter | string | null
  }

  export type PagamentosOrderByWithRelationInput = {
    pagamento?: SortOrder
    descricao?: SortOrder
  }

  export type PagamentosWhereUniqueInput = {
    pagamento?: number
  }

  export type PagamentosOrderByWithAggregationInput = {
    pagamento?: SortOrder
    descricao?: SortOrder
    _count?: PagamentosCountOrderByAggregateInput
    _avg?: PagamentosAvgOrderByAggregateInput
    _max?: PagamentosMaxOrderByAggregateInput
    _min?: PagamentosMinOrderByAggregateInput
    _sum?: PagamentosSumOrderByAggregateInput
  }

  export type PagamentosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PagamentosScalarWhereWithAggregatesInput>
    OR?: Enumerable<PagamentosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PagamentosScalarWhereWithAggregatesInput>
    pagamento?: IntWithAggregatesFilter | number
    descricao?: StringNullableWithAggregatesFilter | string | null
  }

  export type clientes_clusterWhereInput = {
    AND?: Enumerable<clientes_clusterWhereInput>
    OR?: Enumerable<clientes_clusterWhereInput>
    NOT?: Enumerable<clientes_clusterWhereInput>
    id?: IntFilter | number
    nome?: StringNullableFilter | string | null
    idade?: IntNullableFilter | number | null
    endereco?: StringNullableFilter | string | null
    cluster?: IntNullableFilter | number | null
  }

  export type clientes_clusterOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    idade?: SortOrder
    endereco?: SortOrder
    cluster?: SortOrder
  }

  export type clientes_clusterWhereUniqueInput = {
    id?: number
  }

  export type clientes_clusterOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    idade?: SortOrder
    endereco?: SortOrder
    cluster?: SortOrder
    _count?: clientes_clusterCountOrderByAggregateInput
    _avg?: clientes_clusterAvgOrderByAggregateInput
    _max?: clientes_clusterMaxOrderByAggregateInput
    _min?: clientes_clusterMinOrderByAggregateInput
    _sum?: clientes_clusterSumOrderByAggregateInput
  }

  export type clientes_clusterScalarWhereWithAggregatesInput = {
    AND?: Enumerable<clientes_clusterScalarWhereWithAggregatesInput>
    OR?: Enumerable<clientes_clusterScalarWhereWithAggregatesInput>
    NOT?: Enumerable<clientes_clusterScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringNullableWithAggregatesFilter | string | null
    idade?: IntNullableWithAggregatesFilter | number | null
    endereco?: StringNullableWithAggregatesFilter | string | null
    cluster?: IntNullableWithAggregatesFilter | number | null
  }

  export type clustersWhereInput = {
    AND?: Enumerable<clustersWhereInput>
    OR?: Enumerable<clustersWhereInput>
    NOT?: Enumerable<clustersWhereInput>
    cluster?: IntFilter | number
    descricao?: StringNullableFilter | string | null
  }

  export type clustersOrderByWithRelationInput = {
    cluster?: SortOrder
    descricao?: SortOrder
  }

  export type clustersWhereUniqueInput = {
    cluster?: number
  }

  export type clustersOrderByWithAggregationInput = {
    cluster?: SortOrder
    descricao?: SortOrder
    _count?: clustersCountOrderByAggregateInput
    _avg?: clustersAvgOrderByAggregateInput
    _max?: clustersMaxOrderByAggregateInput
    _min?: clustersMinOrderByAggregateInput
    _sum?: clustersSumOrderByAggregateInput
  }

  export type clustersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<clustersScalarWhereWithAggregatesInput>
    OR?: Enumerable<clustersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<clustersScalarWhereWithAggregatesInput>
    cluster?: IntWithAggregatesFilter | number
    descricao?: StringNullableWithAggregatesFilter | string | null
  }

  export type vendasWhereInput = {
    AND?: Enumerable<vendasWhereInput>
    OR?: Enumerable<vendasWhereInput>
    NOT?: Enumerable<vendasWhereInput>
    id?: IntFilter | number
    id_cliente?: IntNullableFilter | number | null
    id_produto?: IntNullableFilter | number | null
    data_venda?: DateTimeNullableFilter | Date | string | null
    valor?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    pagamento?: IntNullableFilter | number | null
  }

  export type vendasOrderByWithRelationInput = {
    id?: SortOrder
    id_cliente?: SortOrder
    id_produto?: SortOrder
    data_venda?: SortOrder
    valor?: SortOrder
    pagamento?: SortOrder
  }

  export type vendasWhereUniqueInput = {
    id?: number
  }

  export type vendasOrderByWithAggregationInput = {
    id?: SortOrder
    id_cliente?: SortOrder
    id_produto?: SortOrder
    data_venda?: SortOrder
    valor?: SortOrder
    pagamento?: SortOrder
    _count?: vendasCountOrderByAggregateInput
    _avg?: vendasAvgOrderByAggregateInput
    _max?: vendasMaxOrderByAggregateInput
    _min?: vendasMinOrderByAggregateInput
    _sum?: vendasSumOrderByAggregateInput
  }

  export type vendasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<vendasScalarWhereWithAggregatesInput>
    OR?: Enumerable<vendasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<vendasScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    id_cliente?: IntNullableWithAggregatesFilter | number | null
    id_produto?: IntNullableWithAggregatesFilter | number | null
    data_venda?: DateTimeNullableWithAggregatesFilter | Date | string | null
    valor?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    pagamento?: IntNullableWithAggregatesFilter | number | null
  }

  export type ProdutosCreateInput = {
    nome?: string | null
    categoria?: string | null
    preco?: Decimal | DecimalJsLike | number | string | null
  }

  export type ProdutosUncheckedCreateInput = {
    id?: number
    nome?: string | null
    categoria?: string | null
    preco?: Decimal | DecimalJsLike | number | string | null
  }

  export type ProdutosUpdateInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ProdutosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ProdutosCreateManyInput = {
    id?: number
    nome?: string | null
    categoria?: string | null
    preco?: Decimal | DecimalJsLike | number | string | null
  }

  export type ProdutosUpdateManyMutationInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ProdutosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type PessoasCreateInput = {
    nome?: string | null
    idade?: number | null
    endereco?: string | null
  }

  export type PessoasUncheckedCreateInput = {
    id?: number
    nome?: string | null
    idade?: number | null
    endereco?: string | null
  }

  export type PessoasUpdateInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PessoasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PessoasCreateManyInput = {
    id?: number
    nome?: string | null
    idade?: number | null
    endereco?: string | null
  }

  export type PessoasUpdateManyMutationInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PessoasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PagamentosCreateInput = {
    pagamento: number
    descricao?: string | null
  }

  export type PagamentosUncheckedCreateInput = {
    pagamento: number
    descricao?: string | null
  }

  export type PagamentosUpdateInput = {
    pagamento?: IntFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PagamentosUncheckedUpdateInput = {
    pagamento?: IntFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PagamentosCreateManyInput = {
    pagamento: number
    descricao?: string | null
  }

  export type PagamentosUpdateManyMutationInput = {
    pagamento?: IntFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PagamentosUncheckedUpdateManyInput = {
    pagamento?: IntFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clientes_clusterCreateInput = {
    nome?: string | null
    idade?: number | null
    endereco?: string | null
    cluster?: number | null
  }

  export type clientes_clusterUncheckedCreateInput = {
    id?: number
    nome?: string | null
    idade?: number | null
    endereco?: string | null
    cluster?: number | null
  }

  export type clientes_clusterUpdateInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cluster?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clientes_clusterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cluster?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clientes_clusterCreateManyInput = {
    id?: number
    nome?: string | null
    idade?: number | null
    endereco?: string | null
    cluster?: number | null
  }

  export type clientes_clusterUpdateManyMutationInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cluster?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clientes_clusterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cluster?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clustersCreateInput = {
    cluster: number
    descricao?: string | null
  }

  export type clustersUncheckedCreateInput = {
    cluster: number
    descricao?: string | null
  }

  export type clustersUpdateInput = {
    cluster?: IntFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clustersUncheckedUpdateInput = {
    cluster?: IntFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clustersCreateManyInput = {
    cluster: number
    descricao?: string | null
  }

  export type clustersUpdateManyMutationInput = {
    cluster?: IntFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clustersUncheckedUpdateManyInput = {
    cluster?: IntFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type vendasCreateInput = {
    id_cliente?: number | null
    id_produto?: number | null
    data_venda?: Date | string | null
    valor?: Decimal | DecimalJsLike | number | string | null
    pagamento?: number | null
  }

  export type vendasUncheckedCreateInput = {
    id?: number
    id_cliente?: number | null
    id_produto?: number | null
    data_venda?: Date | string | null
    valor?: Decimal | DecimalJsLike | number | string | null
    pagamento?: number | null
  }

  export type vendasUpdateInput = {
    id_cliente?: NullableIntFieldUpdateOperationsInput | number | null
    id_produto?: NullableIntFieldUpdateOperationsInput | number | null
    data_venda?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pagamento?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type vendasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_cliente?: NullableIntFieldUpdateOperationsInput | number | null
    id_produto?: NullableIntFieldUpdateOperationsInput | number | null
    data_venda?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pagamento?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type vendasCreateManyInput = {
    id?: number
    id_cliente?: number | null
    id_produto?: number | null
    data_venda?: Date | string | null
    valor?: Decimal | DecimalJsLike | number | string | null
    pagamento?: number | null
  }

  export type vendasUpdateManyMutationInput = {
    id_cliente?: NullableIntFieldUpdateOperationsInput | number | null
    id_produto?: NullableIntFieldUpdateOperationsInput | number | null
    data_venda?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pagamento?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type vendasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_cliente?: NullableIntFieldUpdateOperationsInput | number | null
    id_produto?: NullableIntFieldUpdateOperationsInput | number | null
    data_venda?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pagamento?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type ProdutosCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
    preco?: SortOrder
  }

  export type ProdutosAvgOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
  }

  export type ProdutosMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
    preco?: SortOrder
  }

  export type ProdutosMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
    preco?: SortOrder
  }

  export type ProdutosSumOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type PessoasCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    idade?: SortOrder
    endereco?: SortOrder
  }

  export type PessoasAvgOrderByAggregateInput = {
    id?: SortOrder
    idade?: SortOrder
  }

  export type PessoasMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    idade?: SortOrder
    endereco?: SortOrder
  }

  export type PessoasMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    idade?: SortOrder
    endereco?: SortOrder
  }

  export type PessoasSumOrderByAggregateInput = {
    id?: SortOrder
    idade?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type PagamentosCountOrderByAggregateInput = {
    pagamento?: SortOrder
    descricao?: SortOrder
  }

  export type PagamentosAvgOrderByAggregateInput = {
    pagamento?: SortOrder
  }

  export type PagamentosMaxOrderByAggregateInput = {
    pagamento?: SortOrder
    descricao?: SortOrder
  }

  export type PagamentosMinOrderByAggregateInput = {
    pagamento?: SortOrder
    descricao?: SortOrder
  }

  export type PagamentosSumOrderByAggregateInput = {
    pagamento?: SortOrder
  }

  export type clientes_clusterCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    idade?: SortOrder
    endereco?: SortOrder
    cluster?: SortOrder
  }

  export type clientes_clusterAvgOrderByAggregateInput = {
    id?: SortOrder
    idade?: SortOrder
    cluster?: SortOrder
  }

  export type clientes_clusterMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    idade?: SortOrder
    endereco?: SortOrder
    cluster?: SortOrder
  }

  export type clientes_clusterMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    idade?: SortOrder
    endereco?: SortOrder
    cluster?: SortOrder
  }

  export type clientes_clusterSumOrderByAggregateInput = {
    id?: SortOrder
    idade?: SortOrder
    cluster?: SortOrder
  }

  export type clustersCountOrderByAggregateInput = {
    cluster?: SortOrder
    descricao?: SortOrder
  }

  export type clustersAvgOrderByAggregateInput = {
    cluster?: SortOrder
  }

  export type clustersMaxOrderByAggregateInput = {
    cluster?: SortOrder
    descricao?: SortOrder
  }

  export type clustersMinOrderByAggregateInput = {
    cluster?: SortOrder
    descricao?: SortOrder
  }

  export type clustersSumOrderByAggregateInput = {
    cluster?: SortOrder
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type vendasCountOrderByAggregateInput = {
    id?: SortOrder
    id_cliente?: SortOrder
    id_produto?: SortOrder
    data_venda?: SortOrder
    valor?: SortOrder
    pagamento?: SortOrder
  }

  export type vendasAvgOrderByAggregateInput = {
    id?: SortOrder
    id_cliente?: SortOrder
    id_produto?: SortOrder
    valor?: SortOrder
    pagamento?: SortOrder
  }

  export type vendasMaxOrderByAggregateInput = {
    id?: SortOrder
    id_cliente?: SortOrder
    id_produto?: SortOrder
    data_venda?: SortOrder
    valor?: SortOrder
    pagamento?: SortOrder
  }

  export type vendasMinOrderByAggregateInput = {
    id?: SortOrder
    id_cliente?: SortOrder
    id_produto?: SortOrder
    data_venda?: SortOrder
    valor?: SortOrder
    pagamento?: SortOrder
  }

  export type vendasSumOrderByAggregateInput = {
    id?: SortOrder
    id_cliente?: SortOrder
    id_produto?: SortOrder
    valor?: SortOrder
    pagamento?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}