
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type ProdutosPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Produtos"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    nome: string | null
    categoria: string | null
    preco: Prisma.Decimal | null
  }, ExtArgs["result"]["produtos"]>
  composites: {}
}

/**
 * Model Produtos
 * 
 */
export type Produtos = runtime.Types.DefaultSelection<ProdutosPayload>
export type PessoasPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Pessoas"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    nome: string | null
    idade: number | null
    endereco: string | null
  }, ExtArgs["result"]["pessoas"]>
  composites: {}
}

/**
 * Model Pessoas
 * 
 */
export type Pessoas = runtime.Types.DefaultSelection<PessoasPayload>
export type clientesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "clientes"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    nome: string | null
    idade: number | null
    endereco: string | null
    cluster: number | null
  }, ExtArgs["result"]["clientes"]>
  composites: {}
}

/**
 * Model clientes
 * 
 */
export type clientes = runtime.Types.DefaultSelection<clientesPayload>
export type recomendacoesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "recomendacoes"
  objects: {}
  scalars: $Extensions.GetResult<{
    produto_analisado: string | null
    produto_consequentemente_comprado: string | null
    confianca: number | null
    lift: number | null
    id: number
  }, ExtArgs["result"]["recomendacoes"]>
  composites: {}
}

/**
 * Model recomendacoes
 * 
 */
export type recomendacoes = runtime.Types.DefaultSelection<recomendacoesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Produtos
 * const produtos = await prisma.produtos.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Produtos
   * const produtos = await prisma.produtos.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.produtos`: Exposes CRUD operations for the **Produtos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produtos.findMany()
    * ```
    */
  get produtos(): Prisma.ProdutosDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.pessoas`: Exposes CRUD operations for the **Pessoas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pessoas
    * const pessoas = await prisma.pessoas.findMany()
    * ```
    */
  get pessoas(): Prisma.PessoasDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.clientes`: Exposes CRUD operations for the **clientes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.clientes.findMany()
    * ```
    */
  get clientes(): Prisma.clientesDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.recomendacoes`: Exposes CRUD operations for the **recomendacoes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recomendacoes
    * const recomendacoes = await prisma.recomendacoes.findMany()
    * ```
    */
  get recomendacoes(): Prisma.recomendacoesDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Produtos: 'Produtos',
    Pessoas: 'Pessoas',
    clientes: 'clientes',
    recomendacoes: 'recomendacoes'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'produtos' | 'pessoas' | 'clientes' | 'recomendacoes'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Produtos: {
        payload: ProdutosPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ProdutosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProdutosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProdutosPayload>
          }
          findFirst: {
            args: Prisma.ProdutosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProdutosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProdutosPayload>
          }
          findMany: {
            args: Prisma.ProdutosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProdutosPayload>[]
          }
          create: {
            args: Prisma.ProdutosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProdutosPayload>
          }
          createMany: {
            args: Prisma.ProdutosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProdutosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProdutosPayload>
          }
          update: {
            args: Prisma.ProdutosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProdutosPayload>
          }
          deleteMany: {
            args: Prisma.ProdutosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProdutosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProdutosPayload>
          }
          aggregate: {
            args: Prisma.ProdutosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProdutos>
          }
          groupBy: {
            args: Prisma.ProdutosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProdutosGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutosCountArgs<ExtArgs>,
            result: $Utils.Optional<ProdutosCountAggregateOutputType> | number
          }
        }
      }
      Pessoas: {
        payload: PessoasPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.PessoasFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PessoasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PessoasFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PessoasPayload>
          }
          findFirst: {
            args: Prisma.PessoasFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PessoasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PessoasFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PessoasPayload>
          }
          findMany: {
            args: Prisma.PessoasFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PessoasPayload>[]
          }
          create: {
            args: Prisma.PessoasCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PessoasPayload>
          }
          createMany: {
            args: Prisma.PessoasCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PessoasDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PessoasPayload>
          }
          update: {
            args: Prisma.PessoasUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PessoasPayload>
          }
          deleteMany: {
            args: Prisma.PessoasDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PessoasUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PessoasUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PessoasPayload>
          }
          aggregate: {
            args: Prisma.PessoasAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePessoas>
          }
          groupBy: {
            args: Prisma.PessoasGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PessoasGroupByOutputType>[]
          }
          count: {
            args: Prisma.PessoasCountArgs<ExtArgs>,
            result: $Utils.Optional<PessoasCountAggregateOutputType> | number
          }
        }
      }
      clientes: {
        payload: clientesPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.clientesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.clientesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload>
          }
          findFirst: {
            args: Prisma.clientesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.clientesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload>
          }
          findMany: {
            args: Prisma.clientesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload>[]
          }
          create: {
            args: Prisma.clientesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload>
          }
          createMany: {
            args: Prisma.clientesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.clientesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload>
          }
          update: {
            args: Prisma.clientesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload>
          }
          deleteMany: {
            args: Prisma.clientesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.clientesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.clientesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<clientesPayload>
          }
          aggregate: {
            args: Prisma.ClientesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClientes>
          }
          groupBy: {
            args: Prisma.ClientesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClientesGroupByOutputType>[]
          }
          count: {
            args: Prisma.clientesCountArgs<ExtArgs>,
            result: $Utils.Optional<ClientesCountAggregateOutputType> | number
          }
        }
      }
      recomendacoes: {
        payload: recomendacoesPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.recomendacoesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<recomendacoesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.recomendacoesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<recomendacoesPayload>
          }
          findFirst: {
            args: Prisma.recomendacoesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<recomendacoesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.recomendacoesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<recomendacoesPayload>
          }
          findMany: {
            args: Prisma.recomendacoesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<recomendacoesPayload>[]
          }
          create: {
            args: Prisma.recomendacoesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<recomendacoesPayload>
          }
          createMany: {
            args: Prisma.recomendacoesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.recomendacoesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<recomendacoesPayload>
          }
          update: {
            args: Prisma.recomendacoesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<recomendacoesPayload>
          }
          deleteMany: {
            args: Prisma.recomendacoesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.recomendacoesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.recomendacoesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<recomendacoesPayload>
          }
          aggregate: {
            args: Prisma.RecomendacoesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRecomendacoes>
          }
          groupBy: {
            args: Prisma.RecomendacoesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RecomendacoesGroupByOutputType>[]
          }
          count: {
            args: Prisma.recomendacoesCountArgs<ExtArgs>,
            result: $Utils.Optional<RecomendacoesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Produtos
   */


  export type AggregateProdutos = {
    _count: ProdutosCountAggregateOutputType | null
    _avg: ProdutosAvgAggregateOutputType | null
    _sum: ProdutosSumAggregateOutputType | null
    _min: ProdutosMinAggregateOutputType | null
    _max: ProdutosMaxAggregateOutputType | null
  }

  export type ProdutosAvgAggregateOutputType = {
    id: number | null
    preco: Decimal | null
  }

  export type ProdutosSumAggregateOutputType = {
    id: number | null
    preco: Decimal | null
  }

  export type ProdutosMinAggregateOutputType = {
    id: number | null
    nome: string | null
    categoria: string | null
    preco: Decimal | null
  }

  export type ProdutosMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    categoria: string | null
    preco: Decimal | null
  }

  export type ProdutosCountAggregateOutputType = {
    id: number
    nome: number
    categoria: number
    preco: number
    _all: number
  }


  export type ProdutosAvgAggregateInputType = {
    id?: true
    preco?: true
  }

  export type ProdutosSumAggregateInputType = {
    id?: true
    preco?: true
  }

  export type ProdutosMinAggregateInputType = {
    id?: true
    nome?: true
    categoria?: true
    preco?: true
  }

  export type ProdutosMaxAggregateInputType = {
    id?: true
    nome?: true
    categoria?: true
    preco?: true
  }

  export type ProdutosCountAggregateInputType = {
    id?: true
    nome?: true
    categoria?: true
    preco?: true
    _all?: true
  }

  export type ProdutosAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produtos to aggregate.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: Enumerable<ProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produtos
    **/
    _count?: true | ProdutosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutosMaxAggregateInputType
  }

  export type GetProdutosAggregateType<T extends ProdutosAggregateArgs> = {
        [P in keyof T & keyof AggregateProdutos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProdutos[P]>
      : GetScalarType<T[P], AggregateProdutos[P]>
  }




  export type ProdutosGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProdutosWhereInput
    orderBy?: Enumerable<ProdutosOrderByWithAggregationInput>
    by: ProdutosScalarFieldEnum[]
    having?: ProdutosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutosCountAggregateInputType | true
    _avg?: ProdutosAvgAggregateInputType
    _sum?: ProdutosSumAggregateInputType
    _min?: ProdutosMinAggregateInputType
    _max?: ProdutosMaxAggregateInputType
  }


  export type ProdutosGroupByOutputType = {
    id: number
    nome: string | null
    categoria: string | null
    preco: Decimal | null
    _count: ProdutosCountAggregateOutputType | null
    _avg: ProdutosAvgAggregateOutputType | null
    _sum: ProdutosSumAggregateOutputType | null
    _min: ProdutosMinAggregateOutputType | null
    _max: ProdutosMaxAggregateOutputType | null
  }

  type GetProdutosGroupByPayload<T extends ProdutosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProdutosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutosGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutosGroupByOutputType[P]>
        }
      >
    >


  export type ProdutosSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    categoria?: boolean
    preco?: boolean
  }, ExtArgs["result"]["produtos"]>

  export type ProdutosSelectScalar = {
    id?: boolean
    nome?: boolean
    categoria?: boolean
    preco?: boolean
  }


  type ProdutosGetPayload<S extends boolean | null | undefined | ProdutosArgs> = $Types.GetResult<ProdutosPayload, S>

  type ProdutosCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProdutosFindManyArgs, 'select' | 'include'> & {
      select?: ProdutosCountAggregateInputType | true
    }

  export interface ProdutosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produtos'], meta: { name: 'Produtos' } }
    /**
     * Find zero or one Produtos that matches the filter.
     * @param {ProdutosFindUniqueArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProdutosFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProdutosFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Produtos'> extends True ? Prisma__ProdutosClient<$Types.GetResult<ProdutosPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ProdutosClient<$Types.GetResult<ProdutosPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Produtos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProdutosFindUniqueOrThrowArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProdutosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProdutosClient<$Types.GetResult<ProdutosPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosFindFirstArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProdutosFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProdutosFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Produtos'> extends True ? Prisma__ProdutosClient<$Types.GetResult<ProdutosPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ProdutosClient<$Types.GetResult<ProdutosPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Produtos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosFindFirstOrThrowArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProdutosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProdutosClient<$Types.GetResult<ProdutosPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produtos.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produtos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtosWithIdOnly = await prisma.produtos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProdutosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ProdutosPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Produtos.
     * @param {ProdutosCreateArgs} args - Arguments to create a Produtos.
     * @example
     * // Create one Produtos
     * const Produtos = await prisma.produtos.create({
     *   data: {
     *     // ... data to create a Produtos
     *   }
     * })
     * 
    **/
    create<T extends ProdutosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutosCreateArgs<ExtArgs>>
    ): Prisma__ProdutosClient<$Types.GetResult<ProdutosPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Produtos.
     *     @param {ProdutosCreateManyArgs} args - Arguments to create many Produtos.
     *     @example
     *     // Create many Produtos
     *     const produtos = await prisma.produtos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProdutosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Produtos.
     * @param {ProdutosDeleteArgs} args - Arguments to delete one Produtos.
     * @example
     * // Delete one Produtos
     * const Produtos = await prisma.produtos.delete({
     *   where: {
     *     // ... filter to delete one Produtos
     *   }
     * })
     * 
    **/
    delete<T extends ProdutosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutosDeleteArgs<ExtArgs>>
    ): Prisma__ProdutosClient<$Types.GetResult<ProdutosPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Produtos.
     * @param {ProdutosUpdateArgs} args - Arguments to update one Produtos.
     * @example
     * // Update one Produtos
     * const produtos = await prisma.produtos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProdutosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutosUpdateArgs<ExtArgs>>
    ): Prisma__ProdutosClient<$Types.GetResult<ProdutosPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Produtos.
     * @param {ProdutosDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produtos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProdutosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProdutosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produtos = await prisma.produtos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProdutosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produtos.
     * @param {ProdutosUpsertArgs} args - Arguments to update or create a Produtos.
     * @example
     * // Update or create a Produtos
     * const produtos = await prisma.produtos.upsert({
     *   create: {
     *     // ... data to create a Produtos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produtos we want to update
     *   }
     * })
    **/
    upsert<T extends ProdutosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProdutosUpsertArgs<ExtArgs>>
    ): Prisma__ProdutosClient<$Types.GetResult<ProdutosPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produtos.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends ProdutosCountArgs>(
      args?: Subset<T, ProdutosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutosAggregateArgs>(args: Subset<T, ProdutosAggregateArgs>): Prisma.PrismaPromise<GetProdutosAggregateType<T>>

    /**
     * Group by Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutosGroupByArgs['orderBy'] }
        : { orderBy?: ProdutosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Produtos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProdutosClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Produtos base type for findUnique actions
   */
  export type ProdutosFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where: ProdutosWhereUniqueInput
  }

  /**
   * Produtos findUnique
   */
  export interface ProdutosFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ProdutosFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Produtos findUniqueOrThrow
   */
  export type ProdutosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where: ProdutosWhereUniqueInput
  }


  /**
   * Produtos base type for findFirst actions
   */
  export type ProdutosFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: Enumerable<ProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: Enumerable<ProdutosScalarFieldEnum>
  }

  /**
   * Produtos findFirst
   */
  export interface ProdutosFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ProdutosFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Produtos findFirstOrThrow
   */
  export type ProdutosFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: Enumerable<ProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: Enumerable<ProdutosScalarFieldEnum>
  }


  /**
   * Produtos findMany
   */
  export type ProdutosFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: Enumerable<ProdutosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produtos.
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    distinct?: Enumerable<ProdutosScalarFieldEnum>
  }


  /**
   * Produtos create
   */
  export type ProdutosCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * The data needed to create a Produtos.
     */
    data?: XOR<ProdutosCreateInput, ProdutosUncheckedCreateInput>
  }


  /**
   * Produtos createMany
   */
  export type ProdutosCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produtos.
     */
    data: Enumerable<ProdutosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Produtos update
   */
  export type ProdutosUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * The data needed to update a Produtos.
     */
    data: XOR<ProdutosUpdateInput, ProdutosUncheckedUpdateInput>
    /**
     * Choose, which Produtos to update.
     */
    where: ProdutosWhereUniqueInput
  }


  /**
   * Produtos updateMany
   */
  export type ProdutosUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutosUpdateManyMutationInput, ProdutosUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutosWhereInput
  }


  /**
   * Produtos upsert
   */
  export type ProdutosUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * The filter to search for the Produtos to update in case it exists.
     */
    where: ProdutosWhereUniqueInput
    /**
     * In case the Produtos found by the `where` argument doesn't exist, create a new Produtos with this data.
     */
    create: XOR<ProdutosCreateInput, ProdutosUncheckedCreateInput>
    /**
     * In case the Produtos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutosUpdateInput, ProdutosUncheckedUpdateInput>
  }


  /**
   * Produtos delete
   */
  export type ProdutosDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Filter which Produtos to delete.
     */
    where: ProdutosWhereUniqueInput
  }


  /**
   * Produtos deleteMany
   */
  export type ProdutosDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produtos to delete
     */
    where?: ProdutosWhereInput
  }


  /**
   * Produtos without action
   */
  export type ProdutosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
  }



  /**
   * Model Pessoas
   */


  export type AggregatePessoas = {
    _count: PessoasCountAggregateOutputType | null
    _avg: PessoasAvgAggregateOutputType | null
    _sum: PessoasSumAggregateOutputType | null
    _min: PessoasMinAggregateOutputType | null
    _max: PessoasMaxAggregateOutputType | null
  }

  export type PessoasAvgAggregateOutputType = {
    id: number | null
    idade: number | null
  }

  export type PessoasSumAggregateOutputType = {
    id: number | null
    idade: number | null
  }

  export type PessoasMinAggregateOutputType = {
    id: number | null
    nome: string | null
    idade: number | null
    endereco: string | null
  }

  export type PessoasMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    idade: number | null
    endereco: string | null
  }

  export type PessoasCountAggregateOutputType = {
    id: number
    nome: number
    idade: number
    endereco: number
    _all: number
  }


  export type PessoasAvgAggregateInputType = {
    id?: true
    idade?: true
  }

  export type PessoasSumAggregateInputType = {
    id?: true
    idade?: true
  }

  export type PessoasMinAggregateInputType = {
    id?: true
    nome?: true
    idade?: true
    endereco?: true
  }

  export type PessoasMaxAggregateInputType = {
    id?: true
    nome?: true
    idade?: true
    endereco?: true
  }

  export type PessoasCountAggregateInputType = {
    id?: true
    nome?: true
    idade?: true
    endereco?: true
    _all?: true
  }

  export type PessoasAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pessoas to aggregate.
     */
    where?: PessoasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pessoas to fetch.
     */
    orderBy?: Enumerable<PessoasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PessoasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pessoas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pessoas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pessoas
    **/
    _count?: true | PessoasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PessoasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PessoasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PessoasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PessoasMaxAggregateInputType
  }

  export type GetPessoasAggregateType<T extends PessoasAggregateArgs> = {
        [P in keyof T & keyof AggregatePessoas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePessoas[P]>
      : GetScalarType<T[P], AggregatePessoas[P]>
  }




  export type PessoasGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PessoasWhereInput
    orderBy?: Enumerable<PessoasOrderByWithAggregationInput>
    by: PessoasScalarFieldEnum[]
    having?: PessoasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PessoasCountAggregateInputType | true
    _avg?: PessoasAvgAggregateInputType
    _sum?: PessoasSumAggregateInputType
    _min?: PessoasMinAggregateInputType
    _max?: PessoasMaxAggregateInputType
  }


  export type PessoasGroupByOutputType = {
    id: number
    nome: string | null
    idade: number | null
    endereco: string | null
    _count: PessoasCountAggregateOutputType | null
    _avg: PessoasAvgAggregateOutputType | null
    _sum: PessoasSumAggregateOutputType | null
    _min: PessoasMinAggregateOutputType | null
    _max: PessoasMaxAggregateOutputType | null
  }

  type GetPessoasGroupByPayload<T extends PessoasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PessoasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PessoasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PessoasGroupByOutputType[P]>
            : GetScalarType<T[P], PessoasGroupByOutputType[P]>
        }
      >
    >


  export type PessoasSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    idade?: boolean
    endereco?: boolean
  }, ExtArgs["result"]["pessoas"]>

  export type PessoasSelectScalar = {
    id?: boolean
    nome?: boolean
    idade?: boolean
    endereco?: boolean
  }


  type PessoasGetPayload<S extends boolean | null | undefined | PessoasArgs> = $Types.GetResult<PessoasPayload, S>

  type PessoasCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PessoasFindManyArgs, 'select' | 'include'> & {
      select?: PessoasCountAggregateInputType | true
    }

  export interface PessoasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pessoas'], meta: { name: 'Pessoas' } }
    /**
     * Find zero or one Pessoas that matches the filter.
     * @param {PessoasFindUniqueArgs} args - Arguments to find a Pessoas
     * @example
     * // Get one Pessoas
     * const pessoas = await prisma.pessoas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PessoasFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PessoasFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Pessoas'> extends True ? Prisma__PessoasClient<$Types.GetResult<PessoasPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__PessoasClient<$Types.GetResult<PessoasPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Pessoas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PessoasFindUniqueOrThrowArgs} args - Arguments to find a Pessoas
     * @example
     * // Get one Pessoas
     * const pessoas = await prisma.pessoas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PessoasFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PessoasFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PessoasClient<$Types.GetResult<PessoasPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Pessoas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PessoasFindFirstArgs} args - Arguments to find a Pessoas
     * @example
     * // Get one Pessoas
     * const pessoas = await prisma.pessoas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PessoasFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PessoasFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Pessoas'> extends True ? Prisma__PessoasClient<$Types.GetResult<PessoasPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__PessoasClient<$Types.GetResult<PessoasPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Pessoas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PessoasFindFirstOrThrowArgs} args - Arguments to find a Pessoas
     * @example
     * // Get one Pessoas
     * const pessoas = await prisma.pessoas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PessoasFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PessoasFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PessoasClient<$Types.GetResult<PessoasPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Pessoas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PessoasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pessoas
     * const pessoas = await prisma.pessoas.findMany()
     * 
     * // Get first 10 Pessoas
     * const pessoas = await prisma.pessoas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pessoasWithIdOnly = await prisma.pessoas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PessoasFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PessoasFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PessoasPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Pessoas.
     * @param {PessoasCreateArgs} args - Arguments to create a Pessoas.
     * @example
     * // Create one Pessoas
     * const Pessoas = await prisma.pessoas.create({
     *   data: {
     *     // ... data to create a Pessoas
     *   }
     * })
     * 
    **/
    create<T extends PessoasCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PessoasCreateArgs<ExtArgs>>
    ): Prisma__PessoasClient<$Types.GetResult<PessoasPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Pessoas.
     *     @param {PessoasCreateManyArgs} args - Arguments to create many Pessoas.
     *     @example
     *     // Create many Pessoas
     *     const pessoas = await prisma.pessoas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PessoasCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PessoasCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pessoas.
     * @param {PessoasDeleteArgs} args - Arguments to delete one Pessoas.
     * @example
     * // Delete one Pessoas
     * const Pessoas = await prisma.pessoas.delete({
     *   where: {
     *     // ... filter to delete one Pessoas
     *   }
     * })
     * 
    **/
    delete<T extends PessoasDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PessoasDeleteArgs<ExtArgs>>
    ): Prisma__PessoasClient<$Types.GetResult<PessoasPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Pessoas.
     * @param {PessoasUpdateArgs} args - Arguments to update one Pessoas.
     * @example
     * // Update one Pessoas
     * const pessoas = await prisma.pessoas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PessoasUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PessoasUpdateArgs<ExtArgs>>
    ): Prisma__PessoasClient<$Types.GetResult<PessoasPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Pessoas.
     * @param {PessoasDeleteManyArgs} args - Arguments to filter Pessoas to delete.
     * @example
     * // Delete a few Pessoas
     * const { count } = await prisma.pessoas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PessoasDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PessoasDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pessoas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PessoasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pessoas
     * const pessoas = await prisma.pessoas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PessoasUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PessoasUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pessoas.
     * @param {PessoasUpsertArgs} args - Arguments to update or create a Pessoas.
     * @example
     * // Update or create a Pessoas
     * const pessoas = await prisma.pessoas.upsert({
     *   create: {
     *     // ... data to create a Pessoas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pessoas we want to update
     *   }
     * })
    **/
    upsert<T extends PessoasUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PessoasUpsertArgs<ExtArgs>>
    ): Prisma__PessoasClient<$Types.GetResult<PessoasPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Pessoas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PessoasCountArgs} args - Arguments to filter Pessoas to count.
     * @example
     * // Count the number of Pessoas
     * const count = await prisma.pessoas.count({
     *   where: {
     *     // ... the filter for the Pessoas we want to count
     *   }
     * })
    **/
    count<T extends PessoasCountArgs>(
      args?: Subset<T, PessoasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PessoasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pessoas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PessoasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PessoasAggregateArgs>(args: Subset<T, PessoasAggregateArgs>): Prisma.PrismaPromise<GetPessoasAggregateType<T>>

    /**
     * Group by Pessoas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PessoasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PessoasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PessoasGroupByArgs['orderBy'] }
        : { orderBy?: PessoasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PessoasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPessoasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Pessoas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PessoasClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Pessoas base type for findUnique actions
   */
  export type PessoasFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect<ExtArgs> | null
    /**
     * Filter, which Pessoas to fetch.
     */
    where: PessoasWhereUniqueInput
  }

  /**
   * Pessoas findUnique
   */
  export interface PessoasFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PessoasFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pessoas findUniqueOrThrow
   */
  export type PessoasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect<ExtArgs> | null
    /**
     * Filter, which Pessoas to fetch.
     */
    where: PessoasWhereUniqueInput
  }


  /**
   * Pessoas base type for findFirst actions
   */
  export type PessoasFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect<ExtArgs> | null
    /**
     * Filter, which Pessoas to fetch.
     */
    where?: PessoasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pessoas to fetch.
     */
    orderBy?: Enumerable<PessoasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pessoas.
     */
    cursor?: PessoasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pessoas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pessoas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pessoas.
     */
    distinct?: Enumerable<PessoasScalarFieldEnum>
  }

  /**
   * Pessoas findFirst
   */
  export interface PessoasFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PessoasFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pessoas findFirstOrThrow
   */
  export type PessoasFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect<ExtArgs> | null
    /**
     * Filter, which Pessoas to fetch.
     */
    where?: PessoasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pessoas to fetch.
     */
    orderBy?: Enumerable<PessoasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pessoas.
     */
    cursor?: PessoasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pessoas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pessoas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pessoas.
     */
    distinct?: Enumerable<PessoasScalarFieldEnum>
  }


  /**
   * Pessoas findMany
   */
  export type PessoasFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect<ExtArgs> | null
    /**
     * Filter, which Pessoas to fetch.
     */
    where?: PessoasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pessoas to fetch.
     */
    orderBy?: Enumerable<PessoasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pessoas.
     */
    cursor?: PessoasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pessoas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pessoas.
     */
    skip?: number
    distinct?: Enumerable<PessoasScalarFieldEnum>
  }


  /**
   * Pessoas create
   */
  export type PessoasCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect<ExtArgs> | null
    /**
     * The data needed to create a Pessoas.
     */
    data?: XOR<PessoasCreateInput, PessoasUncheckedCreateInput>
  }


  /**
   * Pessoas createMany
   */
  export type PessoasCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pessoas.
     */
    data: Enumerable<PessoasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Pessoas update
   */
  export type PessoasUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect<ExtArgs> | null
    /**
     * The data needed to update a Pessoas.
     */
    data: XOR<PessoasUpdateInput, PessoasUncheckedUpdateInput>
    /**
     * Choose, which Pessoas to update.
     */
    where: PessoasWhereUniqueInput
  }


  /**
   * Pessoas updateMany
   */
  export type PessoasUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pessoas.
     */
    data: XOR<PessoasUpdateManyMutationInput, PessoasUncheckedUpdateManyInput>
    /**
     * Filter which Pessoas to update
     */
    where?: PessoasWhereInput
  }


  /**
   * Pessoas upsert
   */
  export type PessoasUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect<ExtArgs> | null
    /**
     * The filter to search for the Pessoas to update in case it exists.
     */
    where: PessoasWhereUniqueInput
    /**
     * In case the Pessoas found by the `where` argument doesn't exist, create a new Pessoas with this data.
     */
    create: XOR<PessoasCreateInput, PessoasUncheckedCreateInput>
    /**
     * In case the Pessoas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PessoasUpdateInput, PessoasUncheckedUpdateInput>
  }


  /**
   * Pessoas delete
   */
  export type PessoasDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect<ExtArgs> | null
    /**
     * Filter which Pessoas to delete.
     */
    where: PessoasWhereUniqueInput
  }


  /**
   * Pessoas deleteMany
   */
  export type PessoasDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pessoas to delete
     */
    where?: PessoasWhereInput
  }


  /**
   * Pessoas without action
   */
  export type PessoasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pessoas
     */
    select?: PessoasSelect<ExtArgs> | null
  }



  /**
   * Model clientes
   */


  export type AggregateClientes = {
    _count: ClientesCountAggregateOutputType | null
    _avg: ClientesAvgAggregateOutputType | null
    _sum: ClientesSumAggregateOutputType | null
    _min: ClientesMinAggregateOutputType | null
    _max: ClientesMaxAggregateOutputType | null
  }

  export type ClientesAvgAggregateOutputType = {
    id: number | null
    idade: number | null
    cluster: number | null
  }

  export type ClientesSumAggregateOutputType = {
    id: number | null
    idade: number | null
    cluster: number | null
  }

  export type ClientesMinAggregateOutputType = {
    id: number | null
    nome: string | null
    idade: number | null
    endereco: string | null
    cluster: number | null
  }

  export type ClientesMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    idade: number | null
    endereco: string | null
    cluster: number | null
  }

  export type ClientesCountAggregateOutputType = {
    id: number
    nome: number
    idade: number
    endereco: number
    cluster: number
    _all: number
  }


  export type ClientesAvgAggregateInputType = {
    id?: true
    idade?: true
    cluster?: true
  }

  export type ClientesSumAggregateInputType = {
    id?: true
    idade?: true
    cluster?: true
  }

  export type ClientesMinAggregateInputType = {
    id?: true
    nome?: true
    idade?: true
    endereco?: true
    cluster?: true
  }

  export type ClientesMaxAggregateInputType = {
    id?: true
    nome?: true
    idade?: true
    endereco?: true
    cluster?: true
  }

  export type ClientesCountAggregateInputType = {
    id?: true
    nome?: true
    idade?: true
    endereco?: true
    cluster?: true
    _all?: true
  }

  export type ClientesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which clientes to aggregate.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: Enumerable<clientesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clientes
    **/
    _count?: true | ClientesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientesMaxAggregateInputType
  }

  export type GetClientesAggregateType<T extends ClientesAggregateArgs> = {
        [P in keyof T & keyof AggregateClientes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientes[P]>
      : GetScalarType<T[P], AggregateClientes[P]>
  }




  export type ClientesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: clientesWhereInput
    orderBy?: Enumerable<clientesOrderByWithAggregationInput>
    by: ClientesScalarFieldEnum[]
    having?: clientesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientesCountAggregateInputType | true
    _avg?: ClientesAvgAggregateInputType
    _sum?: ClientesSumAggregateInputType
    _min?: ClientesMinAggregateInputType
    _max?: ClientesMaxAggregateInputType
  }


  export type ClientesGroupByOutputType = {
    id: number
    nome: string | null
    idade: number | null
    endereco: string | null
    cluster: number | null
    _count: ClientesCountAggregateOutputType | null
    _avg: ClientesAvgAggregateOutputType | null
    _sum: ClientesSumAggregateOutputType | null
    _min: ClientesMinAggregateOutputType | null
    _max: ClientesMaxAggregateOutputType | null
  }

  type GetClientesGroupByPayload<T extends ClientesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClientesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientesGroupByOutputType[P]>
            : GetScalarType<T[P], ClientesGroupByOutputType[P]>
        }
      >
    >


  export type clientesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    idade?: boolean
    endereco?: boolean
    cluster?: boolean
  }, ExtArgs["result"]["clientes"]>

  export type clientesSelectScalar = {
    id?: boolean
    nome?: boolean
    idade?: boolean
    endereco?: boolean
    cluster?: boolean
  }


  type clientesGetPayload<S extends boolean | null | undefined | clientesArgs> = $Types.GetResult<clientesPayload, S>

  type clientesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<clientesFindManyArgs, 'select' | 'include'> & {
      select?: ClientesCountAggregateInputType | true
    }

  export interface clientesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['clientes'], meta: { name: 'clientes' } }
    /**
     * Find zero or one Clientes that matches the filter.
     * @param {clientesFindUniqueArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends clientesFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, clientesFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'clientes'> extends True ? Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Clientes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {clientesFindUniqueOrThrowArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends clientesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, clientesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindFirstArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends clientesFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, clientesFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'clientes'> extends True ? Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Clientes that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindFirstOrThrowArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends clientesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, clientesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.clientes.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.clientes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientesWithIdOnly = await prisma.clientes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends clientesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, clientesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<clientesPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Clientes.
     * @param {clientesCreateArgs} args - Arguments to create a Clientes.
     * @example
     * // Create one Clientes
     * const Clientes = await prisma.clientes.create({
     *   data: {
     *     // ... data to create a Clientes
     *   }
     * })
     * 
    **/
    create<T extends clientesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, clientesCreateArgs<ExtArgs>>
    ): Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Clientes.
     *     @param {clientesCreateManyArgs} args - Arguments to create many Clientes.
     *     @example
     *     // Create many Clientes
     *     const clientes = await prisma.clientes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends clientesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, clientesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Clientes.
     * @param {clientesDeleteArgs} args - Arguments to delete one Clientes.
     * @example
     * // Delete one Clientes
     * const Clientes = await prisma.clientes.delete({
     *   where: {
     *     // ... filter to delete one Clientes
     *   }
     * })
     * 
    **/
    delete<T extends clientesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, clientesDeleteArgs<ExtArgs>>
    ): Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Clientes.
     * @param {clientesUpdateArgs} args - Arguments to update one Clientes.
     * @example
     * // Update one Clientes
     * const clientes = await prisma.clientes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends clientesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, clientesUpdateArgs<ExtArgs>>
    ): Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Clientes.
     * @param {clientesDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.clientes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends clientesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, clientesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const clientes = await prisma.clientes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends clientesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, clientesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Clientes.
     * @param {clientesUpsertArgs} args - Arguments to update or create a Clientes.
     * @example
     * // Update or create a Clientes
     * const clientes = await prisma.clientes.upsert({
     *   create: {
     *     // ... data to create a Clientes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clientes we want to update
     *   }
     * })
    **/
    upsert<T extends clientesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, clientesUpsertArgs<ExtArgs>>
    ): Prisma__clientesClient<$Types.GetResult<clientesPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.clientes.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends clientesCountArgs>(
      args?: Subset<T, clientesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientesAggregateArgs>(args: Subset<T, ClientesAggregateArgs>): Prisma.PrismaPromise<GetClientesAggregateType<T>>

    /**
     * Group by Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientesGroupByArgs['orderBy'] }
        : { orderBy?: ClientesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for clientes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__clientesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * clientes base type for findUnique actions
   */
  export type clientesFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where: clientesWhereUniqueInput
  }

  /**
   * clientes findUnique
   */
  export interface clientesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends clientesFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * clientes findUniqueOrThrow
   */
  export type clientesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where: clientesWhereUniqueInput
  }


  /**
   * clientes base type for findFirst actions
   */
  export type clientesFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: Enumerable<clientesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     */
    distinct?: Enumerable<ClientesScalarFieldEnum>
  }

  /**
   * clientes findFirst
   */
  export interface clientesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends clientesFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * clientes findFirstOrThrow
   */
  export type clientesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: Enumerable<clientesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     */
    distinct?: Enumerable<ClientesScalarFieldEnum>
  }


  /**
   * clientes findMany
   */
  export type clientesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter, which clientes to fetch.
     */
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     */
    orderBy?: Enumerable<clientesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clientes.
     */
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     */
    skip?: number
    distinct?: Enumerable<ClientesScalarFieldEnum>
  }


  /**
   * clientes create
   */
  export type clientesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * The data needed to create a clientes.
     */
    data?: XOR<clientesCreateInput, clientesUncheckedCreateInput>
  }


  /**
   * clientes createMany
   */
  export type clientesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many clientes.
     */
    data: Enumerable<clientesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * clientes update
   */
  export type clientesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * The data needed to update a clientes.
     */
    data: XOR<clientesUpdateInput, clientesUncheckedUpdateInput>
    /**
     * Choose, which clientes to update.
     */
    where: clientesWhereUniqueInput
  }


  /**
   * clientes updateMany
   */
  export type clientesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update clientes.
     */
    data: XOR<clientesUpdateManyMutationInput, clientesUncheckedUpdateManyInput>
    /**
     * Filter which clientes to update
     */
    where?: clientesWhereInput
  }


  /**
   * clientes upsert
   */
  export type clientesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * The filter to search for the clientes to update in case it exists.
     */
    where: clientesWhereUniqueInput
    /**
     * In case the clientes found by the `where` argument doesn't exist, create a new clientes with this data.
     */
    create: XOR<clientesCreateInput, clientesUncheckedCreateInput>
    /**
     * In case the clientes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clientesUpdateInput, clientesUncheckedUpdateInput>
  }


  /**
   * clientes delete
   */
  export type clientesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
    /**
     * Filter which clientes to delete.
     */
    where: clientesWhereUniqueInput
  }


  /**
   * clientes deleteMany
   */
  export type clientesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which clientes to delete
     */
    where?: clientesWhereInput
  }


  /**
   * clientes without action
   */
  export type clientesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientes
     */
    select?: clientesSelect<ExtArgs> | null
  }



  /**
   * Model recomendacoes
   */


  export type AggregateRecomendacoes = {
    _count: RecomendacoesCountAggregateOutputType | null
    _avg: RecomendacoesAvgAggregateOutputType | null
    _sum: RecomendacoesSumAggregateOutputType | null
    _min: RecomendacoesMinAggregateOutputType | null
    _max: RecomendacoesMaxAggregateOutputType | null
  }

  export type RecomendacoesAvgAggregateOutputType = {
    confianca: number | null
    lift: number | null
    id: number | null
  }

  export type RecomendacoesSumAggregateOutputType = {
    confianca: number | null
    lift: number | null
    id: number | null
  }

  export type RecomendacoesMinAggregateOutputType = {
    produto_analisado: string | null
    produto_consequentemente_comprado: string | null
    confianca: number | null
    lift: number | null
    id: number | null
  }

  export type RecomendacoesMaxAggregateOutputType = {
    produto_analisado: string | null
    produto_consequentemente_comprado: string | null
    confianca: number | null
    lift: number | null
    id: number | null
  }

  export type RecomendacoesCountAggregateOutputType = {
    produto_analisado: number
    produto_consequentemente_comprado: number
    confianca: number
    lift: number
    id: number
    _all: number
  }


  export type RecomendacoesAvgAggregateInputType = {
    confianca?: true
    lift?: true
    id?: true
  }

  export type RecomendacoesSumAggregateInputType = {
    confianca?: true
    lift?: true
    id?: true
  }

  export type RecomendacoesMinAggregateInputType = {
    produto_analisado?: true
    produto_consequentemente_comprado?: true
    confianca?: true
    lift?: true
    id?: true
  }

  export type RecomendacoesMaxAggregateInputType = {
    produto_analisado?: true
    produto_consequentemente_comprado?: true
    confianca?: true
    lift?: true
    id?: true
  }

  export type RecomendacoesCountAggregateInputType = {
    produto_analisado?: true
    produto_consequentemente_comprado?: true
    confianca?: true
    lift?: true
    id?: true
    _all?: true
  }

  export type RecomendacoesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which recomendacoes to aggregate.
     */
    where?: recomendacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recomendacoes to fetch.
     */
    orderBy?: Enumerable<recomendacoesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: recomendacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recomendacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recomendacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned recomendacoes
    **/
    _count?: true | RecomendacoesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecomendacoesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecomendacoesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecomendacoesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecomendacoesMaxAggregateInputType
  }

  export type GetRecomendacoesAggregateType<T extends RecomendacoesAggregateArgs> = {
        [P in keyof T & keyof AggregateRecomendacoes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecomendacoes[P]>
      : GetScalarType<T[P], AggregateRecomendacoes[P]>
  }




  export type RecomendacoesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: recomendacoesWhereInput
    orderBy?: Enumerable<recomendacoesOrderByWithAggregationInput>
    by: RecomendacoesScalarFieldEnum[]
    having?: recomendacoesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecomendacoesCountAggregateInputType | true
    _avg?: RecomendacoesAvgAggregateInputType
    _sum?: RecomendacoesSumAggregateInputType
    _min?: RecomendacoesMinAggregateInputType
    _max?: RecomendacoesMaxAggregateInputType
  }


  export type RecomendacoesGroupByOutputType = {
    produto_analisado: string | null
    produto_consequentemente_comprado: string | null
    confianca: number | null
    lift: number | null
    id: number
    _count: RecomendacoesCountAggregateOutputType | null
    _avg: RecomendacoesAvgAggregateOutputType | null
    _sum: RecomendacoesSumAggregateOutputType | null
    _min: RecomendacoesMinAggregateOutputType | null
    _max: RecomendacoesMaxAggregateOutputType | null
  }

  type GetRecomendacoesGroupByPayload<T extends RecomendacoesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RecomendacoesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecomendacoesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecomendacoesGroupByOutputType[P]>
            : GetScalarType<T[P], RecomendacoesGroupByOutputType[P]>
        }
      >
    >


  export type recomendacoesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    produto_analisado?: boolean
    produto_consequentemente_comprado?: boolean
    confianca?: boolean
    lift?: boolean
    id?: boolean
  }, ExtArgs["result"]["recomendacoes"]>

  export type recomendacoesSelectScalar = {
    produto_analisado?: boolean
    produto_consequentemente_comprado?: boolean
    confianca?: boolean
    lift?: boolean
    id?: boolean
  }


  type recomendacoesGetPayload<S extends boolean | null | undefined | recomendacoesArgs> = $Types.GetResult<recomendacoesPayload, S>

  type recomendacoesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<recomendacoesFindManyArgs, 'select' | 'include'> & {
      select?: RecomendacoesCountAggregateInputType | true
    }

  export interface recomendacoesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['recomendacoes'], meta: { name: 'recomendacoes' } }
    /**
     * Find zero or one Recomendacoes that matches the filter.
     * @param {recomendacoesFindUniqueArgs} args - Arguments to find a Recomendacoes
     * @example
     * // Get one Recomendacoes
     * const recomendacoes = await prisma.recomendacoes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends recomendacoesFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, recomendacoesFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'recomendacoes'> extends True ? Prisma__recomendacoesClient<$Types.GetResult<recomendacoesPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__recomendacoesClient<$Types.GetResult<recomendacoesPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Recomendacoes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {recomendacoesFindUniqueOrThrowArgs} args - Arguments to find a Recomendacoes
     * @example
     * // Get one Recomendacoes
     * const recomendacoes = await prisma.recomendacoes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends recomendacoesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, recomendacoesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__recomendacoesClient<$Types.GetResult<recomendacoesPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Recomendacoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recomendacoesFindFirstArgs} args - Arguments to find a Recomendacoes
     * @example
     * // Get one Recomendacoes
     * const recomendacoes = await prisma.recomendacoes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends recomendacoesFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, recomendacoesFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'recomendacoes'> extends True ? Prisma__recomendacoesClient<$Types.GetResult<recomendacoesPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__recomendacoesClient<$Types.GetResult<recomendacoesPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Recomendacoes that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recomendacoesFindFirstOrThrowArgs} args - Arguments to find a Recomendacoes
     * @example
     * // Get one Recomendacoes
     * const recomendacoes = await prisma.recomendacoes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends recomendacoesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, recomendacoesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__recomendacoesClient<$Types.GetResult<recomendacoesPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Recomendacoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recomendacoesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recomendacoes
     * const recomendacoes = await prisma.recomendacoes.findMany()
     * 
     * // Get first 10 Recomendacoes
     * const recomendacoes = await prisma.recomendacoes.findMany({ take: 10 })
     * 
     * // Only select the `produto_analisado`
     * const recomendacoesWithProduto_analisadoOnly = await prisma.recomendacoes.findMany({ select: { produto_analisado: true } })
     * 
    **/
    findMany<T extends recomendacoesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, recomendacoesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<recomendacoesPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Recomendacoes.
     * @param {recomendacoesCreateArgs} args - Arguments to create a Recomendacoes.
     * @example
     * // Create one Recomendacoes
     * const Recomendacoes = await prisma.recomendacoes.create({
     *   data: {
     *     // ... data to create a Recomendacoes
     *   }
     * })
     * 
    **/
    create<T extends recomendacoesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, recomendacoesCreateArgs<ExtArgs>>
    ): Prisma__recomendacoesClient<$Types.GetResult<recomendacoesPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Recomendacoes.
     *     @param {recomendacoesCreateManyArgs} args - Arguments to create many Recomendacoes.
     *     @example
     *     // Create many Recomendacoes
     *     const recomendacoes = await prisma.recomendacoes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends recomendacoesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, recomendacoesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Recomendacoes.
     * @param {recomendacoesDeleteArgs} args - Arguments to delete one Recomendacoes.
     * @example
     * // Delete one Recomendacoes
     * const Recomendacoes = await prisma.recomendacoes.delete({
     *   where: {
     *     // ... filter to delete one Recomendacoes
     *   }
     * })
     * 
    **/
    delete<T extends recomendacoesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, recomendacoesDeleteArgs<ExtArgs>>
    ): Prisma__recomendacoesClient<$Types.GetResult<recomendacoesPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Recomendacoes.
     * @param {recomendacoesUpdateArgs} args - Arguments to update one Recomendacoes.
     * @example
     * // Update one Recomendacoes
     * const recomendacoes = await prisma.recomendacoes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends recomendacoesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, recomendacoesUpdateArgs<ExtArgs>>
    ): Prisma__recomendacoesClient<$Types.GetResult<recomendacoesPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Recomendacoes.
     * @param {recomendacoesDeleteManyArgs} args - Arguments to filter Recomendacoes to delete.
     * @example
     * // Delete a few Recomendacoes
     * const { count } = await prisma.recomendacoes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends recomendacoesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, recomendacoesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recomendacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recomendacoesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recomendacoes
     * const recomendacoes = await prisma.recomendacoes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends recomendacoesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, recomendacoesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recomendacoes.
     * @param {recomendacoesUpsertArgs} args - Arguments to update or create a Recomendacoes.
     * @example
     * // Update or create a Recomendacoes
     * const recomendacoes = await prisma.recomendacoes.upsert({
     *   create: {
     *     // ... data to create a Recomendacoes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recomendacoes we want to update
     *   }
     * })
    **/
    upsert<T extends recomendacoesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, recomendacoesUpsertArgs<ExtArgs>>
    ): Prisma__recomendacoesClient<$Types.GetResult<recomendacoesPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Recomendacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recomendacoesCountArgs} args - Arguments to filter Recomendacoes to count.
     * @example
     * // Count the number of Recomendacoes
     * const count = await prisma.recomendacoes.count({
     *   where: {
     *     // ... the filter for the Recomendacoes we want to count
     *   }
     * })
    **/
    count<T extends recomendacoesCountArgs>(
      args?: Subset<T, recomendacoesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecomendacoesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recomendacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecomendacoesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecomendacoesAggregateArgs>(args: Subset<T, RecomendacoesAggregateArgs>): Prisma.PrismaPromise<GetRecomendacoesAggregateType<T>>

    /**
     * Group by Recomendacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecomendacoesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecomendacoesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecomendacoesGroupByArgs['orderBy'] }
        : { orderBy?: RecomendacoesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecomendacoesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecomendacoesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for recomendacoes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__recomendacoesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * recomendacoes base type for findUnique actions
   */
  export type recomendacoesFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recomendacoes
     */
    select?: recomendacoesSelect<ExtArgs> | null
    /**
     * Filter, which recomendacoes to fetch.
     */
    where: recomendacoesWhereUniqueInput
  }

  /**
   * recomendacoes findUnique
   */
  export interface recomendacoesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends recomendacoesFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * recomendacoes findUniqueOrThrow
   */
  export type recomendacoesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recomendacoes
     */
    select?: recomendacoesSelect<ExtArgs> | null
    /**
     * Filter, which recomendacoes to fetch.
     */
    where: recomendacoesWhereUniqueInput
  }


  /**
   * recomendacoes base type for findFirst actions
   */
  export type recomendacoesFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recomendacoes
     */
    select?: recomendacoesSelect<ExtArgs> | null
    /**
     * Filter, which recomendacoes to fetch.
     */
    where?: recomendacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recomendacoes to fetch.
     */
    orderBy?: Enumerable<recomendacoesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for recomendacoes.
     */
    cursor?: recomendacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recomendacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recomendacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of recomendacoes.
     */
    distinct?: Enumerable<RecomendacoesScalarFieldEnum>
  }

  /**
   * recomendacoes findFirst
   */
  export interface recomendacoesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends recomendacoesFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * recomendacoes findFirstOrThrow
   */
  export type recomendacoesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recomendacoes
     */
    select?: recomendacoesSelect<ExtArgs> | null
    /**
     * Filter, which recomendacoes to fetch.
     */
    where?: recomendacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recomendacoes to fetch.
     */
    orderBy?: Enumerable<recomendacoesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for recomendacoes.
     */
    cursor?: recomendacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recomendacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recomendacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of recomendacoes.
     */
    distinct?: Enumerable<RecomendacoesScalarFieldEnum>
  }


  /**
   * recomendacoes findMany
   */
  export type recomendacoesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recomendacoes
     */
    select?: recomendacoesSelect<ExtArgs> | null
    /**
     * Filter, which recomendacoes to fetch.
     */
    where?: recomendacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recomendacoes to fetch.
     */
    orderBy?: Enumerable<recomendacoesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing recomendacoes.
     */
    cursor?: recomendacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recomendacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recomendacoes.
     */
    skip?: number
    distinct?: Enumerable<RecomendacoesScalarFieldEnum>
  }


  /**
   * recomendacoes create
   */
  export type recomendacoesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recomendacoes
     */
    select?: recomendacoesSelect<ExtArgs> | null
    /**
     * The data needed to create a recomendacoes.
     */
    data?: XOR<recomendacoesCreateInput, recomendacoesUncheckedCreateInput>
  }


  /**
   * recomendacoes createMany
   */
  export type recomendacoesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many recomendacoes.
     */
    data: Enumerable<recomendacoesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * recomendacoes update
   */
  export type recomendacoesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recomendacoes
     */
    select?: recomendacoesSelect<ExtArgs> | null
    /**
     * The data needed to update a recomendacoes.
     */
    data: XOR<recomendacoesUpdateInput, recomendacoesUncheckedUpdateInput>
    /**
     * Choose, which recomendacoes to update.
     */
    where: recomendacoesWhereUniqueInput
  }


  /**
   * recomendacoes updateMany
   */
  export type recomendacoesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update recomendacoes.
     */
    data: XOR<recomendacoesUpdateManyMutationInput, recomendacoesUncheckedUpdateManyInput>
    /**
     * Filter which recomendacoes to update
     */
    where?: recomendacoesWhereInput
  }


  /**
   * recomendacoes upsert
   */
  export type recomendacoesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recomendacoes
     */
    select?: recomendacoesSelect<ExtArgs> | null
    /**
     * The filter to search for the recomendacoes to update in case it exists.
     */
    where: recomendacoesWhereUniqueInput
    /**
     * In case the recomendacoes found by the `where` argument doesn't exist, create a new recomendacoes with this data.
     */
    create: XOR<recomendacoesCreateInput, recomendacoesUncheckedCreateInput>
    /**
     * In case the recomendacoes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<recomendacoesUpdateInput, recomendacoesUncheckedUpdateInput>
  }


  /**
   * recomendacoes delete
   */
  export type recomendacoesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recomendacoes
     */
    select?: recomendacoesSelect<ExtArgs> | null
    /**
     * Filter which recomendacoes to delete.
     */
    where: recomendacoesWhereUniqueInput
  }


  /**
   * recomendacoes deleteMany
   */
  export type recomendacoesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which recomendacoes to delete
     */
    where?: recomendacoesWhereInput
  }


  /**
   * recomendacoes without action
   */
  export type recomendacoesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recomendacoes
     */
    select?: recomendacoesSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProdutosScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    categoria: 'categoria',
    preco: 'preco'
  };

  export type ProdutosScalarFieldEnum = (typeof ProdutosScalarFieldEnum)[keyof typeof ProdutosScalarFieldEnum]


  export const PessoasScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    idade: 'idade',
    endereco: 'endereco'
  };

  export type PessoasScalarFieldEnum = (typeof PessoasScalarFieldEnum)[keyof typeof PessoasScalarFieldEnum]


  export const ClientesScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    idade: 'idade',
    endereco: 'endereco',
    cluster: 'cluster'
  };

  export type ClientesScalarFieldEnum = (typeof ClientesScalarFieldEnum)[keyof typeof ClientesScalarFieldEnum]


  export const RecomendacoesScalarFieldEnum: {
    produto_analisado: 'produto_analisado',
    produto_consequentemente_comprado: 'produto_consequentemente_comprado',
    confianca: 'confianca',
    lift: 'lift',
    id: 'id'
  };

  export type RecomendacoesScalarFieldEnum = (typeof RecomendacoesScalarFieldEnum)[keyof typeof RecomendacoesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type ProdutosWhereInput = {
    AND?: Enumerable<ProdutosWhereInput>
    OR?: Enumerable<ProdutosWhereInput>
    NOT?: Enumerable<ProdutosWhereInput>
    id?: IntFilter | number
    nome?: StringNullableFilter | string | null
    categoria?: StringNullableFilter | string | null
    preco?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type ProdutosOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrderInput | SortOrder
    categoria?: SortOrderInput | SortOrder
    preco?: SortOrderInput | SortOrder
  }

  export type ProdutosWhereUniqueInput = {
    id?: number
  }

  export type ProdutosOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrderInput | SortOrder
    categoria?: SortOrderInput | SortOrder
    preco?: SortOrderInput | SortOrder
    _count?: ProdutosCountOrderByAggregateInput
    _avg?: ProdutosAvgOrderByAggregateInput
    _max?: ProdutosMaxOrderByAggregateInput
    _min?: ProdutosMinOrderByAggregateInput
    _sum?: ProdutosSumOrderByAggregateInput
  }

  export type ProdutosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProdutosScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProdutosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProdutosScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringNullableWithAggregatesFilter | string | null
    categoria?: StringNullableWithAggregatesFilter | string | null
    preco?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type PessoasWhereInput = {
    AND?: Enumerable<PessoasWhereInput>
    OR?: Enumerable<PessoasWhereInput>
    NOT?: Enumerable<PessoasWhereInput>
    id?: IntFilter | number
    nome?: StringNullableFilter | string | null
    idade?: IntNullableFilter | number | null
    endereco?: StringNullableFilter | string | null
  }

  export type PessoasOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrderInput | SortOrder
    idade?: SortOrderInput | SortOrder
    endereco?: SortOrderInput | SortOrder
  }

  export type PessoasWhereUniqueInput = {
    id?: number
  }

  export type PessoasOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrderInput | SortOrder
    idade?: SortOrderInput | SortOrder
    endereco?: SortOrderInput | SortOrder
    _count?: PessoasCountOrderByAggregateInput
    _avg?: PessoasAvgOrderByAggregateInput
    _max?: PessoasMaxOrderByAggregateInput
    _min?: PessoasMinOrderByAggregateInput
    _sum?: PessoasSumOrderByAggregateInput
  }

  export type PessoasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PessoasScalarWhereWithAggregatesInput>
    OR?: Enumerable<PessoasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PessoasScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringNullableWithAggregatesFilter | string | null
    idade?: IntNullableWithAggregatesFilter | number | null
    endereco?: StringNullableWithAggregatesFilter | string | null
  }

  export type clientesWhereInput = {
    AND?: Enumerable<clientesWhereInput>
    OR?: Enumerable<clientesWhereInput>
    NOT?: Enumerable<clientesWhereInput>
    id?: IntFilter | number
    nome?: StringNullableFilter | string | null
    idade?: IntNullableFilter | number | null
    endereco?: StringNullableFilter | string | null
    cluster?: IntNullableFilter | number | null
  }

  export type clientesOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrderInput | SortOrder
    idade?: SortOrderInput | SortOrder
    endereco?: SortOrderInput | SortOrder
    cluster?: SortOrderInput | SortOrder
  }

  export type clientesWhereUniqueInput = {
    id?: number
  }

  export type clientesOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrderInput | SortOrder
    idade?: SortOrderInput | SortOrder
    endereco?: SortOrderInput | SortOrder
    cluster?: SortOrderInput | SortOrder
    _count?: clientesCountOrderByAggregateInput
    _avg?: clientesAvgOrderByAggregateInput
    _max?: clientesMaxOrderByAggregateInput
    _min?: clientesMinOrderByAggregateInput
    _sum?: clientesSumOrderByAggregateInput
  }

  export type clientesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<clientesScalarWhereWithAggregatesInput>
    OR?: Enumerable<clientesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<clientesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringNullableWithAggregatesFilter | string | null
    idade?: IntNullableWithAggregatesFilter | number | null
    endereco?: StringNullableWithAggregatesFilter | string | null
    cluster?: IntNullableWithAggregatesFilter | number | null
  }

  export type recomendacoesWhereInput = {
    AND?: Enumerable<recomendacoesWhereInput>
    OR?: Enumerable<recomendacoesWhereInput>
    NOT?: Enumerable<recomendacoesWhereInput>
    produto_analisado?: StringNullableFilter | string | null
    produto_consequentemente_comprado?: StringNullableFilter | string | null
    confianca?: FloatNullableFilter | number | null
    lift?: FloatNullableFilter | number | null
    id?: IntFilter | number
  }

  export type recomendacoesOrderByWithRelationInput = {
    produto_analisado?: SortOrderInput | SortOrder
    produto_consequentemente_comprado?: SortOrderInput | SortOrder
    confianca?: SortOrderInput | SortOrder
    lift?: SortOrderInput | SortOrder
    id?: SortOrder
  }

  export type recomendacoesWhereUniqueInput = {
    id?: number
  }

  export type recomendacoesOrderByWithAggregationInput = {
    produto_analisado?: SortOrderInput | SortOrder
    produto_consequentemente_comprado?: SortOrderInput | SortOrder
    confianca?: SortOrderInput | SortOrder
    lift?: SortOrderInput | SortOrder
    id?: SortOrder
    _count?: recomendacoesCountOrderByAggregateInput
    _avg?: recomendacoesAvgOrderByAggregateInput
    _max?: recomendacoesMaxOrderByAggregateInput
    _min?: recomendacoesMinOrderByAggregateInput
    _sum?: recomendacoesSumOrderByAggregateInput
  }

  export type recomendacoesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<recomendacoesScalarWhereWithAggregatesInput>
    OR?: Enumerable<recomendacoesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<recomendacoesScalarWhereWithAggregatesInput>
    produto_analisado?: StringNullableWithAggregatesFilter | string | null
    produto_consequentemente_comprado?: StringNullableWithAggregatesFilter | string | null
    confianca?: FloatNullableWithAggregatesFilter | number | null
    lift?: FloatNullableWithAggregatesFilter | number | null
    id?: IntWithAggregatesFilter | number
  }

  export type ProdutosCreateInput = {
    nome?: string | null
    categoria?: string | null
    preco?: Decimal | DecimalJsLike | number | string | null
  }

  export type ProdutosUncheckedCreateInput = {
    id?: number
    nome?: string | null
    categoria?: string | null
    preco?: Decimal | DecimalJsLike | number | string | null
  }

  export type ProdutosUpdateInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ProdutosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ProdutosCreateManyInput = {
    id?: number
    nome?: string | null
    categoria?: string | null
    preco?: Decimal | DecimalJsLike | number | string | null
  }

  export type ProdutosUpdateManyMutationInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ProdutosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    preco?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type PessoasCreateInput = {
    nome?: string | null
    idade?: number | null
    endereco?: string | null
  }

  export type PessoasUncheckedCreateInput = {
    id?: number
    nome?: string | null
    idade?: number | null
    endereco?: string | null
  }

  export type PessoasUpdateInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PessoasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PessoasCreateManyInput = {
    id?: number
    nome?: string | null
    idade?: number | null
    endereco?: string | null
  }

  export type PessoasUpdateManyMutationInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PessoasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clientesCreateInput = {
    nome?: string | null
    idade?: number | null
    endereco?: string | null
    cluster?: number | null
  }

  export type clientesUncheckedCreateInput = {
    id?: number
    nome?: string | null
    idade?: number | null
    endereco?: string | null
    cluster?: number | null
  }

  export type clientesUpdateInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cluster?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clientesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cluster?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clientesCreateManyInput = {
    id?: number
    nome?: string | null
    idade?: number | null
    endereco?: string | null
    cluster?: number | null
  }

  export type clientesUpdateManyMutationInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cluster?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clientesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    idade?: NullableIntFieldUpdateOperationsInput | number | null
    endereco?: NullableStringFieldUpdateOperationsInput | string | null
    cluster?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type recomendacoesCreateInput = {
    produto_analisado?: string | null
    produto_consequentemente_comprado?: string | null
    confianca?: number | null
    lift?: number | null
  }

  export type recomendacoesUncheckedCreateInput = {
    produto_analisado?: string | null
    produto_consequentemente_comprado?: string | null
    confianca?: number | null
    lift?: number | null
    id?: number
  }

  export type recomendacoesUpdateInput = {
    produto_analisado?: NullableStringFieldUpdateOperationsInput | string | null
    produto_consequentemente_comprado?: NullableStringFieldUpdateOperationsInput | string | null
    confianca?: NullableFloatFieldUpdateOperationsInput | number | null
    lift?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type recomendacoesUncheckedUpdateInput = {
    produto_analisado?: NullableStringFieldUpdateOperationsInput | string | null
    produto_consequentemente_comprado?: NullableStringFieldUpdateOperationsInput | string | null
    confianca?: NullableFloatFieldUpdateOperationsInput | number | null
    lift?: NullableFloatFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type recomendacoesCreateManyInput = {
    produto_analisado?: string | null
    produto_consequentemente_comprado?: string | null
    confianca?: number | null
    lift?: number | null
    id?: number
  }

  export type recomendacoesUpdateManyMutationInput = {
    produto_analisado?: NullableStringFieldUpdateOperationsInput | string | null
    produto_consequentemente_comprado?: NullableStringFieldUpdateOperationsInput | string | null
    confianca?: NullableFloatFieldUpdateOperationsInput | number | null
    lift?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type recomendacoesUncheckedUpdateManyInput = {
    produto_analisado?: NullableStringFieldUpdateOperationsInput | string | null
    produto_consequentemente_comprado?: NullableStringFieldUpdateOperationsInput | string | null
    confianca?: NullableFloatFieldUpdateOperationsInput | number | null
    lift?: NullableFloatFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProdutosCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
    preco?: SortOrder
  }

  export type ProdutosAvgOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
  }

  export type ProdutosMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
    preco?: SortOrder
  }

  export type ProdutosMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
    preco?: SortOrder
  }

  export type ProdutosSumOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type PessoasCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    idade?: SortOrder
    endereco?: SortOrder
  }

  export type PessoasAvgOrderByAggregateInput = {
    id?: SortOrder
    idade?: SortOrder
  }

  export type PessoasMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    idade?: SortOrder
    endereco?: SortOrder
  }

  export type PessoasMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    idade?: SortOrder
    endereco?: SortOrder
  }

  export type PessoasSumOrderByAggregateInput = {
    id?: SortOrder
    idade?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type clientesCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    idade?: SortOrder
    endereco?: SortOrder
    cluster?: SortOrder
  }

  export type clientesAvgOrderByAggregateInput = {
    id?: SortOrder
    idade?: SortOrder
    cluster?: SortOrder
  }

  export type clientesMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    idade?: SortOrder
    endereco?: SortOrder
    cluster?: SortOrder
  }

  export type clientesMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    idade?: SortOrder
    endereco?: SortOrder
    cluster?: SortOrder
  }

  export type clientesSumOrderByAggregateInput = {
    id?: SortOrder
    idade?: SortOrder
    cluster?: SortOrder
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type recomendacoesCountOrderByAggregateInput = {
    produto_analisado?: SortOrder
    produto_consequentemente_comprado?: SortOrder
    confianca?: SortOrder
    lift?: SortOrder
    id?: SortOrder
  }

  export type recomendacoesAvgOrderByAggregateInput = {
    confianca?: SortOrder
    lift?: SortOrder
    id?: SortOrder
  }

  export type recomendacoesMaxOrderByAggregateInput = {
    produto_analisado?: SortOrder
    produto_consequentemente_comprado?: SortOrder
    confianca?: SortOrder
    lift?: SortOrder
    id?: SortOrder
  }

  export type recomendacoesMinOrderByAggregateInput = {
    produto_analisado?: SortOrder
    produto_consequentemente_comprado?: SortOrder
    confianca?: SortOrder
    lift?: SortOrder
    id?: SortOrder
  }

  export type recomendacoesSumOrderByAggregateInput = {
    confianca?: SortOrder
    lift?: SortOrder
    id?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}